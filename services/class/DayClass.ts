import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    DayCountProps,
    DayCountResponse,
    DayCreateManyProps,
    DayCreateManyResponse,
    DayCreateProps,
    DayCreateResponse,
    DayDeleteManyProps,
    DayDeleteManyResponse,
    DayDeleteProps,
    DayDeleteResponse,
    DayFindFirstProps,
    DayFindFirstResponse,
    DayFindManyProps,
    DayFindManyResponse,
    DayFindUniqueProps,
    DayFindUniqueResponse,
    DayUpdateManyProps,
    DayUpdateManyResponse,
    DayUpdateProps,
    DayUpdateResponse,
    DayUpsertProps,
    DayUpsertResponse,
} from "@services/types";

/**
 * # Day Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Day Class
 */
export default class DayService {
    /**
     * ## Day Create (Class)
     */
    static async create<T extends Prisma.DayCreateArgs>(props: DayCreateProps<T>): Promise<DayCreateResponse<T>> {
        try {
            return await PrismaInstance.day.create(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Day Upsert (Class)
     */
    static async upsert<T extends Prisma.DayUpsertArgs>(props: DayUpsertProps<T>): Promise<DayUpsertResponse<T>> {
        try {
            return await PrismaInstance.day.upsert(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Day Update (Class)
     */
    static async update<T extends Prisma.DayUpdateArgs>(props: DayUpdateProps<T>): Promise<DayUpdateResponse<T>> {
        try {
            return await PrismaInstance.day.update(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Day Delete (Class)
     */
    static async delete<T extends Prisma.DayDeleteArgs>(props: DayDeleteProps<T>): Promise<DayDeleteResponse<T>> {
        try {
            return await PrismaInstance.day.delete(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Day Create Many (Class)
     */
    static async createMany<T extends Prisma.DayCreateManyArgs>(
        props: DayCreateManyProps<T>,
    ): Promise<DayCreateManyResponse> {
        try {
            return await PrismaInstance.day.createMany(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Day Update Many (Class)
     */
    static async updateMany<T extends Prisma.DayUpdateManyArgs>(
        props: DayUpdateManyProps<T>,
    ): Promise<DayUpdateManyResponse> {
        try {
            return await PrismaInstance.day.updateMany(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Day Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.DayDeleteManyArgs>(
        props: DayDeleteManyProps<T>,
    ): Promise<DayDeleteManyResponse> {
        try {
            return await PrismaInstance.day.deleteMany(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Day Find First (Class)
     */
    static async findFirst<T extends Prisma.DayFindFirstArgs>(
        props: DayFindFirstProps<T>,
    ): Promise<DayFindFirstResponse<T>> {
        try {
            return await PrismaInstance.day.findFirst(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Day Find Unique (Class)
     */
    static async findUnique<T extends Prisma.DayFindUniqueArgs>(
        props: DayFindUniqueProps<T>,
    ): Promise<DayFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.day.findUnique(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Day Find Many (Class)
     */
    static async findMany<T extends Prisma.DayFindManyArgs>(
        props: DayFindManyProps<T>,
    ): Promise<DayFindManyResponse<T>> {
        try {
            return await PrismaInstance.day.findMany(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Day Count (Class)
     */
    static async count<T extends Prisma.DayCountArgs>(props: DayCountProps<T>): Promise<DayCountResponse<T>> {
        try {
            return await PrismaInstance.day.count(props);
        } catch (error) {
            throw DayService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
