import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    SessionCountProps,
    SessionCountResponse,
    SessionCreateManyProps,
    SessionCreateManyResponse,
    SessionCreateProps,
    SessionCreateResponse,
    SessionDeleteManyProps,
    SessionDeleteManyResponse,
    SessionDeleteProps,
    SessionDeleteResponse,
    SessionFindFirstProps,
    SessionFindFirstResponse,
    SessionFindManyProps,
    SessionFindManyResponse,
    SessionFindUniqueProps,
    SessionFindUniqueResponse,
    SessionUpdateManyProps,
    SessionUpdateManyResponse,
    SessionUpdateProps,
    SessionUpdateResponse,
    SessionUpsertProps,
    SessionUpsertResponse,
} from "@services/types";

/**
 * # Session Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Session Class
 */
export default class SessionService {
    /**
     * ## Session Create (Class)
     */
    static async create<T extends Prisma.SessionCreateArgs>(
        props: SessionCreateProps<T>,
    ): Promise<SessionCreateResponse<T>> {
        try {
            return await PrismaInstance.session.create(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Session Upsert (Class)
     */
    static async upsert<T extends Prisma.SessionUpsertArgs>(
        props: SessionUpsertProps<T>,
    ): Promise<SessionUpsertResponse<T>> {
        try {
            return await PrismaInstance.session.upsert(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Session Update (Class)
     */
    static async update<T extends Prisma.SessionUpdateArgs>(
        props: SessionUpdateProps<T>,
    ): Promise<SessionUpdateResponse<T>> {
        try {
            return await PrismaInstance.session.update(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Session Delete (Class)
     */
    static async delete<T extends Prisma.SessionDeleteArgs>(
        props: SessionDeleteProps<T>,
    ): Promise<SessionDeleteResponse<T>> {
        try {
            return await PrismaInstance.session.delete(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Session Create Many (Class)
     */
    static async createMany<T extends Prisma.SessionCreateManyArgs>(
        props: SessionCreateManyProps<T>,
    ): Promise<SessionCreateManyResponse> {
        try {
            return await PrismaInstance.session.createMany(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Session Update Many (Class)
     */
    static async updateMany<T extends Prisma.SessionUpdateManyArgs>(
        props: SessionUpdateManyProps<T>,
    ): Promise<SessionUpdateManyResponse> {
        try {
            return await PrismaInstance.session.updateMany(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Session Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.SessionDeleteManyArgs>(
        props: SessionDeleteManyProps<T>,
    ): Promise<SessionDeleteManyResponse> {
        try {
            return await PrismaInstance.session.deleteMany(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Session Find First (Class)
     */
    static async findFirst<T extends Prisma.SessionFindFirstArgs>(
        props: SessionFindFirstProps<T>,
    ): Promise<SessionFindFirstResponse<T>> {
        try {
            return await PrismaInstance.session.findFirst(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Session Find Unique (Class)
     */
    static async findUnique<T extends Prisma.SessionFindUniqueArgs>(
        props: SessionFindUniqueProps<T>,
    ): Promise<SessionFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.session.findUnique(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Session Find Many (Class)
     */
    static async findMany<T extends Prisma.SessionFindManyArgs>(
        props: SessionFindManyProps<T>,
    ): Promise<SessionFindManyResponse<T>> {
        try {
            return await PrismaInstance.session.findMany(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Session Count (Class)
     */
    static async count<T extends Prisma.SessionCountArgs>(
        props: SessionCountProps<T>,
    ): Promise<SessionCountResponse<T>> {
        try {
            return await PrismaInstance.session.count(props);
        } catch (error) {
            throw SessionService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
