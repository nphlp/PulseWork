import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    UserCountProps,
    UserCountResponse,
    UserCreateManyProps,
    UserCreateManyResponse,
    UserCreateProps,
    UserCreateResponse,
    UserDeleteManyProps,
    UserDeleteManyResponse,
    UserDeleteProps,
    UserDeleteResponse,
    UserFindFirstProps,
    UserFindFirstResponse,
    UserFindManyProps,
    UserFindManyResponse,
    UserFindUniqueProps,
    UserFindUniqueResponse,
    UserUpdateManyProps,
    UserUpdateManyResponse,
    UserUpdateProps,
    UserUpdateResponse,
    UserUpsertProps,
    UserUpsertResponse,
} from "@services/types";

/**
 * # User Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## User Class
 */
export default class UserService {
    /**
     * ## User Create (Class)
     */
    static async create<T extends Prisma.UserCreateArgs>(props: UserCreateProps<T>): Promise<UserCreateResponse<T>> {
        try {
            return await PrismaInstance.user.create(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## User Upsert (Class)
     */
    static async upsert<T extends Prisma.UserUpsertArgs>(props: UserUpsertProps<T>): Promise<UserUpsertResponse<T>> {
        try {
            return await PrismaInstance.user.upsert(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## User Update (Class)
     */
    static async update<T extends Prisma.UserUpdateArgs>(props: UserUpdateProps<T>): Promise<UserUpdateResponse<T>> {
        try {
            return await PrismaInstance.user.update(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## User Delete (Class)
     */
    static async delete<T extends Prisma.UserDeleteArgs>(props: UserDeleteProps<T>): Promise<UserDeleteResponse<T>> {
        try {
            return await PrismaInstance.user.delete(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## User Create Many (Class)
     */
    static async createMany<T extends Prisma.UserCreateManyArgs>(
        props: UserCreateManyProps<T>,
    ): Promise<UserCreateManyResponse> {
        try {
            return await PrismaInstance.user.createMany(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## User Update Many (Class)
     */
    static async updateMany<T extends Prisma.UserUpdateManyArgs>(
        props: UserUpdateManyProps<T>,
    ): Promise<UserUpdateManyResponse> {
        try {
            return await PrismaInstance.user.updateMany(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## User Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.UserDeleteManyArgs>(
        props: UserDeleteManyProps<T>,
    ): Promise<UserDeleteManyResponse> {
        try {
            return await PrismaInstance.user.deleteMany(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## User Find First (Class)
     */
    static async findFirst<T extends Prisma.UserFindFirstArgs>(
        props: UserFindFirstProps<T>,
    ): Promise<UserFindFirstResponse<T>> {
        try {
            return await PrismaInstance.user.findFirst(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## User Find Unique (Class)
     */
    static async findUnique<T extends Prisma.UserFindUniqueArgs>(
        props: UserFindUniqueProps<T>,
    ): Promise<UserFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.user.findUnique(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## User Find Many (Class)
     */
    static async findMany<T extends Prisma.UserFindManyArgs>(
        props: UserFindManyProps<T>,
    ): Promise<UserFindManyResponse<T>> {
        try {
            return await PrismaInstance.user.findMany(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## User Count (Class)
     */
    static async count<T extends Prisma.UserCountArgs>(props: UserCountProps<T>): Promise<UserCountResponse<T>> {
        try {
            return await PrismaInstance.user.count(props);
        } catch (error) {
            throw UserService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
