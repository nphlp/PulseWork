import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    ClockCountProps,
    ClockCountResponse,
    ClockCreateManyProps,
    ClockCreateManyResponse,
    ClockCreateProps,
    ClockCreateResponse,
    ClockDeleteManyProps,
    ClockDeleteManyResponse,
    ClockDeleteProps,
    ClockDeleteResponse,
    ClockFindFirstProps,
    ClockFindFirstResponse,
    ClockFindManyProps,
    ClockFindManyResponse,
    ClockFindUniqueProps,
    ClockFindUniqueResponse,
    ClockUpdateManyProps,
    ClockUpdateManyResponse,
    ClockUpdateProps,
    ClockUpdateResponse,
    ClockUpsertProps,
    ClockUpsertResponse,
} from "@services/types";

/**
 * # Clock Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Clock Class
 */
export default class ClockService {
    /**
     * ## Clock Create (Class)
     */
    static async create<T extends Prisma.ClockCreateArgs>(props: ClockCreateProps<T>): Promise<ClockCreateResponse<T>> {
        try {
            return await PrismaInstance.clock.create(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Clock Upsert (Class)
     */
    static async upsert<T extends Prisma.ClockUpsertArgs>(props: ClockUpsertProps<T>): Promise<ClockUpsertResponse<T>> {
        try {
            return await PrismaInstance.clock.upsert(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Clock Update (Class)
     */
    static async update<T extends Prisma.ClockUpdateArgs>(props: ClockUpdateProps<T>): Promise<ClockUpdateResponse<T>> {
        try {
            return await PrismaInstance.clock.update(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Clock Delete (Class)
     */
    static async delete<T extends Prisma.ClockDeleteArgs>(props: ClockDeleteProps<T>): Promise<ClockDeleteResponse<T>> {
        try {
            return await PrismaInstance.clock.delete(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Clock Create Many (Class)
     */
    static async createMany<T extends Prisma.ClockCreateManyArgs>(
        props: ClockCreateManyProps<T>,
    ): Promise<ClockCreateManyResponse> {
        try {
            return await PrismaInstance.clock.createMany(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Clock Update Many (Class)
     */
    static async updateMany<T extends Prisma.ClockUpdateManyArgs>(
        props: ClockUpdateManyProps<T>,
    ): Promise<ClockUpdateManyResponse> {
        try {
            return await PrismaInstance.clock.updateMany(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Clock Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.ClockDeleteManyArgs>(
        props: ClockDeleteManyProps<T>,
    ): Promise<ClockDeleteManyResponse> {
        try {
            return await PrismaInstance.clock.deleteMany(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Clock Find First (Class)
     */
    static async findFirst<T extends Prisma.ClockFindFirstArgs>(
        props: ClockFindFirstProps<T>,
    ): Promise<ClockFindFirstResponse<T>> {
        try {
            return await PrismaInstance.clock.findFirst(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Clock Find Unique (Class)
     */
    static async findUnique<T extends Prisma.ClockFindUniqueArgs>(
        props: ClockFindUniqueProps<T>,
    ): Promise<ClockFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.clock.findUnique(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Clock Find Many (Class)
     */
    static async findMany<T extends Prisma.ClockFindManyArgs>(
        props: ClockFindManyProps<T>,
    ): Promise<ClockFindManyResponse<T>> {
        try {
            return await PrismaInstance.clock.findMany(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Clock Count (Class)
     */
    static async count<T extends Prisma.ClockCountArgs>(props: ClockCountProps<T>): Promise<ClockCountResponse<T>> {
        try {
            return await PrismaInstance.clock.count(props);
        } catch (error) {
            throw ClockService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
