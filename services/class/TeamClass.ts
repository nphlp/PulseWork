import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    TeamCountProps,
    TeamCountResponse,
    TeamCreateManyProps,
    TeamCreateManyResponse,
    TeamCreateProps,
    TeamCreateResponse,
    TeamDeleteManyProps,
    TeamDeleteManyResponse,
    TeamDeleteProps,
    TeamDeleteResponse,
    TeamFindFirstProps,
    TeamFindFirstResponse,
    TeamFindManyProps,
    TeamFindManyResponse,
    TeamFindUniqueProps,
    TeamFindUniqueResponse,
    TeamUpdateManyProps,
    TeamUpdateManyResponse,
    TeamUpdateProps,
    TeamUpdateResponse,
    TeamUpsertProps,
    TeamUpsertResponse,
} from "@services/types";

/**
 * # Team Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Team Class
 */
export default class TeamService {
    /**
     * ## Team Create (Class)
     */
    static async create<T extends Prisma.TeamCreateArgs>(props: TeamCreateProps<T>): Promise<TeamCreateResponse<T>> {
        try {
            return await PrismaInstance.team.create(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Team Upsert (Class)
     */
    static async upsert<T extends Prisma.TeamUpsertArgs>(props: TeamUpsertProps<T>): Promise<TeamUpsertResponse<T>> {
        try {
            return await PrismaInstance.team.upsert(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Team Update (Class)
     */
    static async update<T extends Prisma.TeamUpdateArgs>(props: TeamUpdateProps<T>): Promise<TeamUpdateResponse<T>> {
        try {
            return await PrismaInstance.team.update(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Team Delete (Class)
     */
    static async delete<T extends Prisma.TeamDeleteArgs>(props: TeamDeleteProps<T>): Promise<TeamDeleteResponse<T>> {
        try {
            return await PrismaInstance.team.delete(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Team Create Many (Class)
     */
    static async createMany<T extends Prisma.TeamCreateManyArgs>(
        props: TeamCreateManyProps<T>,
    ): Promise<TeamCreateManyResponse> {
        try {
            return await PrismaInstance.team.createMany(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Team Update Many (Class)
     */
    static async updateMany<T extends Prisma.TeamUpdateManyArgs>(
        props: TeamUpdateManyProps<T>,
    ): Promise<TeamUpdateManyResponse> {
        try {
            return await PrismaInstance.team.updateMany(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Team Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.TeamDeleteManyArgs>(
        props: TeamDeleteManyProps<T>,
    ): Promise<TeamDeleteManyResponse> {
        try {
            return await PrismaInstance.team.deleteMany(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Team Find First (Class)
     */
    static async findFirst<T extends Prisma.TeamFindFirstArgs>(
        props: TeamFindFirstProps<T>,
    ): Promise<TeamFindFirstResponse<T>> {
        try {
            return await PrismaInstance.team.findFirst(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Team Find Unique (Class)
     */
    static async findUnique<T extends Prisma.TeamFindUniqueArgs>(
        props: TeamFindUniqueProps<T>,
    ): Promise<TeamFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.team.findUnique(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Team Find Many (Class)
     */
    static async findMany<T extends Prisma.TeamFindManyArgs>(
        props: TeamFindManyProps<T>,
    ): Promise<TeamFindManyResponse<T>> {
        try {
            return await PrismaInstance.team.findMany(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Team Count (Class)
     */
    static async count<T extends Prisma.TeamCountArgs>(props: TeamCountProps<T>): Promise<TeamCountResponse<T>> {
        try {
            return await PrismaInstance.team.count(props);
        } catch (error) {
            throw TeamService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
