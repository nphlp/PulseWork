import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    AccountCountProps,
    AccountCountResponse,
    AccountCreateManyProps,
    AccountCreateManyResponse,
    AccountCreateProps,
    AccountCreateResponse,
    AccountDeleteManyProps,
    AccountDeleteManyResponse,
    AccountDeleteProps,
    AccountDeleteResponse,
    AccountFindFirstProps,
    AccountFindFirstResponse,
    AccountFindManyProps,
    AccountFindManyResponse,
    AccountFindUniqueProps,
    AccountFindUniqueResponse,
    AccountUpdateManyProps,
    AccountUpdateManyResponse,
    AccountUpdateProps,
    AccountUpdateResponse,
    AccountUpsertProps,
    AccountUpsertResponse,
} from "@services/types";

/**
 * # Account Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Account Class
 */
export default class AccountService {
    /**
     * ## Account Create (Class)
     */
    static async create<T extends Prisma.AccountCreateArgs>(
        props: AccountCreateProps<T>,
    ): Promise<AccountCreateResponse<T>> {
        try {
            return await PrismaInstance.account.create(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Account Upsert (Class)
     */
    static async upsert<T extends Prisma.AccountUpsertArgs>(
        props: AccountUpsertProps<T>,
    ): Promise<AccountUpsertResponse<T>> {
        try {
            return await PrismaInstance.account.upsert(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Account Update (Class)
     */
    static async update<T extends Prisma.AccountUpdateArgs>(
        props: AccountUpdateProps<T>,
    ): Promise<AccountUpdateResponse<T>> {
        try {
            return await PrismaInstance.account.update(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Account Delete (Class)
     */
    static async delete<T extends Prisma.AccountDeleteArgs>(
        props: AccountDeleteProps<T>,
    ): Promise<AccountDeleteResponse<T>> {
        try {
            return await PrismaInstance.account.delete(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Account Create Many (Class)
     */
    static async createMany<T extends Prisma.AccountCreateManyArgs>(
        props: AccountCreateManyProps<T>,
    ): Promise<AccountCreateManyResponse> {
        try {
            return await PrismaInstance.account.createMany(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Account Update Many (Class)
     */
    static async updateMany<T extends Prisma.AccountUpdateManyArgs>(
        props: AccountUpdateManyProps<T>,
    ): Promise<AccountUpdateManyResponse> {
        try {
            return await PrismaInstance.account.updateMany(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Account Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.AccountDeleteManyArgs>(
        props: AccountDeleteManyProps<T>,
    ): Promise<AccountDeleteManyResponse> {
        try {
            return await PrismaInstance.account.deleteMany(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Account Find First (Class)
     */
    static async findFirst<T extends Prisma.AccountFindFirstArgs>(
        props: AccountFindFirstProps<T>,
    ): Promise<AccountFindFirstResponse<T>> {
        try {
            return await PrismaInstance.account.findFirst(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Account Find Unique (Class)
     */
    static async findUnique<T extends Prisma.AccountFindUniqueArgs>(
        props: AccountFindUniqueProps<T>,
    ): Promise<AccountFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.account.findUnique(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Account Find Many (Class)
     */
    static async findMany<T extends Prisma.AccountFindManyArgs>(
        props: AccountFindManyProps<T>,
    ): Promise<AccountFindManyResponse<T>> {
        try {
            return await PrismaInstance.account.findMany(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Account Count (Class)
     */
    static async count<T extends Prisma.AccountCountArgs>(
        props: AccountCountProps<T>,
    ): Promise<AccountCountResponse<T>> {
        try {
            return await PrismaInstance.account.count(props);
        } catch (error) {
            throw AccountService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
