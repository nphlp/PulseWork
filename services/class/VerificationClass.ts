import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    VerificationCountProps,
    VerificationCountResponse,
    VerificationCreateManyProps,
    VerificationCreateManyResponse,
    VerificationCreateProps,
    VerificationCreateResponse,
    VerificationDeleteManyProps,
    VerificationDeleteManyResponse,
    VerificationDeleteProps,
    VerificationDeleteResponse,
    VerificationFindFirstProps,
    VerificationFindFirstResponse,
    VerificationFindManyProps,
    VerificationFindManyResponse,
    VerificationFindUniqueProps,
    VerificationFindUniqueResponse,
    VerificationUpdateManyProps,
    VerificationUpdateManyResponse,
    VerificationUpdateProps,
    VerificationUpdateResponse,
    VerificationUpsertProps,
    VerificationUpsertResponse,
} from "@services/types";

/**
 * # Verification Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Verification Class
 */
export default class VerificationService {
    /**
     * ## Verification Create (Class)
     */
    static async create<T extends Prisma.VerificationCreateArgs>(
        props: VerificationCreateProps<T>,
    ): Promise<VerificationCreateResponse<T>> {
        try {
            return await PrismaInstance.verification.create(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Verification Upsert (Class)
     */
    static async upsert<T extends Prisma.VerificationUpsertArgs>(
        props: VerificationUpsertProps<T>,
    ): Promise<VerificationUpsertResponse<T>> {
        try {
            return await PrismaInstance.verification.upsert(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Verification Update (Class)
     */
    static async update<T extends Prisma.VerificationUpdateArgs>(
        props: VerificationUpdateProps<T>,
    ): Promise<VerificationUpdateResponse<T>> {
        try {
            return await PrismaInstance.verification.update(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Verification Delete (Class)
     */
    static async delete<T extends Prisma.VerificationDeleteArgs>(
        props: VerificationDeleteProps<T>,
    ): Promise<VerificationDeleteResponse<T>> {
        try {
            return await PrismaInstance.verification.delete(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Verification Create Many (Class)
     */
    static async createMany<T extends Prisma.VerificationCreateManyArgs>(
        props: VerificationCreateManyProps<T>,
    ): Promise<VerificationCreateManyResponse> {
        try {
            return await PrismaInstance.verification.createMany(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Verification Update Many (Class)
     */
    static async updateMany<T extends Prisma.VerificationUpdateManyArgs>(
        props: VerificationUpdateManyProps<T>,
    ): Promise<VerificationUpdateManyResponse> {
        try {
            return await PrismaInstance.verification.updateMany(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Verification Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.VerificationDeleteManyArgs>(
        props: VerificationDeleteManyProps<T>,
    ): Promise<VerificationDeleteManyResponse> {
        try {
            return await PrismaInstance.verification.deleteMany(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Verification Find First (Class)
     */
    static async findFirst<T extends Prisma.VerificationFindFirstArgs>(
        props: VerificationFindFirstProps<T>,
    ): Promise<VerificationFindFirstResponse<T>> {
        try {
            return await PrismaInstance.verification.findFirst(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Verification Find Unique (Class)
     */
    static async findUnique<T extends Prisma.VerificationFindUniqueArgs>(
        props: VerificationFindUniqueProps<T>,
    ): Promise<VerificationFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.verification.findUnique(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Verification Find Many (Class)
     */
    static async findMany<T extends Prisma.VerificationFindManyArgs>(
        props: VerificationFindManyProps<T>,
    ): Promise<VerificationFindManyResponse<T>> {
        try {
            return await PrismaInstance.verification.findMany(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Verification Count (Class)
     */
    static async count<T extends Prisma.VerificationCountArgs>(
        props: VerificationCountProps<T>,
    ): Promise<VerificationCountResponse<T>> {
        try {
            return await PrismaInstance.verification.count(props);
        } catch (error) {
            throw VerificationService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
