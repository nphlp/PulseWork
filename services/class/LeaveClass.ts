import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    LeaveCountProps,
    LeaveCountResponse,
    LeaveCreateManyProps,
    LeaveCreateManyResponse,
    LeaveCreateProps,
    LeaveCreateResponse,
    LeaveDeleteManyProps,
    LeaveDeleteManyResponse,
    LeaveDeleteProps,
    LeaveDeleteResponse,
    LeaveFindFirstProps,
    LeaveFindFirstResponse,
    LeaveFindManyProps,
    LeaveFindManyResponse,
    LeaveFindUniqueProps,
    LeaveFindUniqueResponse,
    LeaveUpdateManyProps,
    LeaveUpdateManyResponse,
    LeaveUpdateProps,
    LeaveUpdateResponse,
    LeaveUpsertProps,
    LeaveUpsertResponse,
} from "@services/types";

/**
 * # Leave Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Leave Class
 */
export default class LeaveService {
    /**
     * ## Leave Create (Class)
     */
    static async create<T extends Prisma.LeaveCreateArgs>(props: LeaveCreateProps<T>): Promise<LeaveCreateResponse<T>> {
        try {
            return await PrismaInstance.leave.create(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Leave Upsert (Class)
     */
    static async upsert<T extends Prisma.LeaveUpsertArgs>(props: LeaveUpsertProps<T>): Promise<LeaveUpsertResponse<T>> {
        try {
            return await PrismaInstance.leave.upsert(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Leave Update (Class)
     */
    static async update<T extends Prisma.LeaveUpdateArgs>(props: LeaveUpdateProps<T>): Promise<LeaveUpdateResponse<T>> {
        try {
            return await PrismaInstance.leave.update(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Leave Delete (Class)
     */
    static async delete<T extends Prisma.LeaveDeleteArgs>(props: LeaveDeleteProps<T>): Promise<LeaveDeleteResponse<T>> {
        try {
            return await PrismaInstance.leave.delete(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Leave Create Many (Class)
     */
    static async createMany<T extends Prisma.LeaveCreateManyArgs>(
        props: LeaveCreateManyProps<T>,
    ): Promise<LeaveCreateManyResponse> {
        try {
            return await PrismaInstance.leave.createMany(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Leave Update Many (Class)
     */
    static async updateMany<T extends Prisma.LeaveUpdateManyArgs>(
        props: LeaveUpdateManyProps<T>,
    ): Promise<LeaveUpdateManyResponse> {
        try {
            return await PrismaInstance.leave.updateMany(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Leave Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.LeaveDeleteManyArgs>(
        props: LeaveDeleteManyProps<T>,
    ): Promise<LeaveDeleteManyResponse> {
        try {
            return await PrismaInstance.leave.deleteMany(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Leave Find First (Class)
     */
    static async findFirst<T extends Prisma.LeaveFindFirstArgs>(
        props: LeaveFindFirstProps<T>,
    ): Promise<LeaveFindFirstResponse<T>> {
        try {
            return await PrismaInstance.leave.findFirst(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Leave Find Unique (Class)
     */
    static async findUnique<T extends Prisma.LeaveFindUniqueArgs>(
        props: LeaveFindUniqueProps<T>,
    ): Promise<LeaveFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.leave.findUnique(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Leave Find Many (Class)
     */
    static async findMany<T extends Prisma.LeaveFindManyArgs>(
        props: LeaveFindManyProps<T>,
    ): Promise<LeaveFindManyResponse<T>> {
        try {
            return await PrismaInstance.leave.findMany(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Leave Count (Class)
     */
    static async count<T extends Prisma.LeaveCountArgs>(props: LeaveCountProps<T>): Promise<LeaveCountResponse<T>> {
        try {
            return await PrismaInstance.leave.count(props);
        } catch (error) {
            throw LeaveService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
