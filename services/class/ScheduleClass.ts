import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    ScheduleCountProps,
    ScheduleCountResponse,
    ScheduleCreateManyProps,
    ScheduleCreateManyResponse,
    ScheduleCreateProps,
    ScheduleCreateResponse,
    ScheduleDeleteManyProps,
    ScheduleDeleteManyResponse,
    ScheduleDeleteProps,
    ScheduleDeleteResponse,
    ScheduleFindFirstProps,
    ScheduleFindFirstResponse,
    ScheduleFindManyProps,
    ScheduleFindManyResponse,
    ScheduleFindUniqueProps,
    ScheduleFindUniqueResponse,
    ScheduleUpdateManyProps,
    ScheduleUpdateManyResponse,
    ScheduleUpdateProps,
    ScheduleUpdateResponse,
    ScheduleUpsertProps,
    ScheduleUpsertResponse,
} from "@services/types";

/**
 * # Schedule Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Schedule Class
 */
export default class ScheduleService {
    /**
     * ## Schedule Create (Class)
     */
    static async create<T extends Prisma.ScheduleCreateArgs>(
        props: ScheduleCreateProps<T>,
    ): Promise<ScheduleCreateResponse<T>> {
        try {
            return await PrismaInstance.schedule.create(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Schedule Upsert (Class)
     */
    static async upsert<T extends Prisma.ScheduleUpsertArgs>(
        props: ScheduleUpsertProps<T>,
    ): Promise<ScheduleUpsertResponse<T>> {
        try {
            return await PrismaInstance.schedule.upsert(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Schedule Update (Class)
     */
    static async update<T extends Prisma.ScheduleUpdateArgs>(
        props: ScheduleUpdateProps<T>,
    ): Promise<ScheduleUpdateResponse<T>> {
        try {
            return await PrismaInstance.schedule.update(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Schedule Delete (Class)
     */
    static async delete<T extends Prisma.ScheduleDeleteArgs>(
        props: ScheduleDeleteProps<T>,
    ): Promise<ScheduleDeleteResponse<T>> {
        try {
            return await PrismaInstance.schedule.delete(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Schedule Create Many (Class)
     */
    static async createMany<T extends Prisma.ScheduleCreateManyArgs>(
        props: ScheduleCreateManyProps<T>,
    ): Promise<ScheduleCreateManyResponse> {
        try {
            return await PrismaInstance.schedule.createMany(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Schedule Update Many (Class)
     */
    static async updateMany<T extends Prisma.ScheduleUpdateManyArgs>(
        props: ScheduleUpdateManyProps<T>,
    ): Promise<ScheduleUpdateManyResponse> {
        try {
            return await PrismaInstance.schedule.updateMany(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Schedule Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.ScheduleDeleteManyArgs>(
        props: ScheduleDeleteManyProps<T>,
    ): Promise<ScheduleDeleteManyResponse> {
        try {
            return await PrismaInstance.schedule.deleteMany(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Schedule Find First (Class)
     */
    static async findFirst<T extends Prisma.ScheduleFindFirstArgs>(
        props: ScheduleFindFirstProps<T>,
    ): Promise<ScheduleFindFirstResponse<T>> {
        try {
            return await PrismaInstance.schedule.findFirst(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Schedule Find Unique (Class)
     */
    static async findUnique<T extends Prisma.ScheduleFindUniqueArgs>(
        props: ScheduleFindUniqueProps<T>,
    ): Promise<ScheduleFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.schedule.findUnique(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Schedule Find Many (Class)
     */
    static async findMany<T extends Prisma.ScheduleFindManyArgs>(
        props: ScheduleFindManyProps<T>,
    ): Promise<ScheduleFindManyResponse<T>> {
        try {
            return await PrismaInstance.schedule.findMany(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Schedule Count (Class)
     */
    static async count<T extends Prisma.ScheduleCountArgs>(
        props: ScheduleCountProps<T>,
    ): Promise<ScheduleCountResponse<T>> {
        try {
            return await PrismaInstance.schedule.count(props);
        } catch (error) {
            throw ScheduleService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
