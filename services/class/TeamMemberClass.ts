import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    TeamMemberCountProps,
    TeamMemberCountResponse,
    TeamMemberCreateManyProps,
    TeamMemberCreateManyResponse,
    TeamMemberCreateProps,
    TeamMemberCreateResponse,
    TeamMemberDeleteManyProps,
    TeamMemberDeleteManyResponse,
    TeamMemberDeleteProps,
    TeamMemberDeleteResponse,
    TeamMemberFindFirstProps,
    TeamMemberFindFirstResponse,
    TeamMemberFindManyProps,
    TeamMemberFindManyResponse,
    TeamMemberFindUniqueProps,
    TeamMemberFindUniqueResponse,
    TeamMemberUpdateManyProps,
    TeamMemberUpdateManyResponse,
    TeamMemberUpdateProps,
    TeamMemberUpdateResponse,
    TeamMemberUpsertProps,
    TeamMemberUpsertResponse,
} from "@services/types";

/**
 * # TeamMember Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## TeamMember Class
 */
export default class TeamMemberService {
    /**
     * ## TeamMember Create (Class)
     */
    static async create<T extends Prisma.TeamMemberCreateArgs>(
        props: TeamMemberCreateProps<T>,
    ): Promise<TeamMemberCreateResponse<T>> {
        try {
            return await PrismaInstance.teamMember.create(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## TeamMember Upsert (Class)
     */
    static async upsert<T extends Prisma.TeamMemberUpsertArgs>(
        props: TeamMemberUpsertProps<T>,
    ): Promise<TeamMemberUpsertResponse<T>> {
        try {
            return await PrismaInstance.teamMember.upsert(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## TeamMember Update (Class)
     */
    static async update<T extends Prisma.TeamMemberUpdateArgs>(
        props: TeamMemberUpdateProps<T>,
    ): Promise<TeamMemberUpdateResponse<T>> {
        try {
            return await PrismaInstance.teamMember.update(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## TeamMember Delete (Class)
     */
    static async delete<T extends Prisma.TeamMemberDeleteArgs>(
        props: TeamMemberDeleteProps<T>,
    ): Promise<TeamMemberDeleteResponse<T>> {
        try {
            return await PrismaInstance.teamMember.delete(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## TeamMember Create Many (Class)
     */
    static async createMany<T extends Prisma.TeamMemberCreateManyArgs>(
        props: TeamMemberCreateManyProps<T>,
    ): Promise<TeamMemberCreateManyResponse> {
        try {
            return await PrismaInstance.teamMember.createMany(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## TeamMember Update Many (Class)
     */
    static async updateMany<T extends Prisma.TeamMemberUpdateManyArgs>(
        props: TeamMemberUpdateManyProps<T>,
    ): Promise<TeamMemberUpdateManyResponse> {
        try {
            return await PrismaInstance.teamMember.updateMany(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## TeamMember Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.TeamMemberDeleteManyArgs>(
        props: TeamMemberDeleteManyProps<T>,
    ): Promise<TeamMemberDeleteManyResponse> {
        try {
            return await PrismaInstance.teamMember.deleteMany(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## TeamMember Find First (Class)
     */
    static async findFirst<T extends Prisma.TeamMemberFindFirstArgs>(
        props: TeamMemberFindFirstProps<T>,
    ): Promise<TeamMemberFindFirstResponse<T>> {
        try {
            return await PrismaInstance.teamMember.findFirst(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## TeamMember Find Unique (Class)
     */
    static async findUnique<T extends Prisma.TeamMemberFindUniqueArgs>(
        props: TeamMemberFindUniqueProps<T>,
    ): Promise<TeamMemberFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.teamMember.findUnique(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## TeamMember Find Many (Class)
     */
    static async findMany<T extends Prisma.TeamMemberFindManyArgs>(
        props: TeamMemberFindManyProps<T>,
    ): Promise<TeamMemberFindManyResponse<T>> {
        try {
            return await PrismaInstance.teamMember.findMany(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## TeamMember Count (Class)
     */
    static async count<T extends Prisma.TeamMemberCountArgs>(
        props: TeamMemberCountProps<T>,
    ): Promise<TeamMemberCountResponse<T>> {
        try {
            return await PrismaInstance.teamMember.count(props);
        } catch (error) {
            throw TeamMemberService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
