import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    TaskCountProps,
    TaskCountResponse,
    TaskCreateManyProps,
    TaskCreateManyResponse,
    TaskCreateProps,
    TaskCreateResponse,
    TaskDeleteManyProps,
    TaskDeleteManyResponse,
    TaskDeleteProps,
    TaskDeleteResponse,
    TaskFindFirstProps,
    TaskFindFirstResponse,
    TaskFindManyProps,
    TaskFindManyResponse,
    TaskFindUniqueProps,
    TaskFindUniqueResponse,
    TaskUpdateManyProps,
    TaskUpdateManyResponse,
    TaskUpdateProps,
    TaskUpdateResponse,
    TaskUpsertProps,
    TaskUpsertResponse,
} from "@services/types";

/**
 * # Task Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Task Class
 */
export default class TaskService {
    /**
     * ## Task Create (Class)
     */
    static async create<T extends Prisma.TaskCreateArgs>(props: TaskCreateProps<T>): Promise<TaskCreateResponse<T>> {
        try {
            return await PrismaInstance.task.create(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Task Upsert (Class)
     */
    static async upsert<T extends Prisma.TaskUpsertArgs>(props: TaskUpsertProps<T>): Promise<TaskUpsertResponse<T>> {
        try {
            return await PrismaInstance.task.upsert(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Task Update (Class)
     */
    static async update<T extends Prisma.TaskUpdateArgs>(props: TaskUpdateProps<T>): Promise<TaskUpdateResponse<T>> {
        try {
            return await PrismaInstance.task.update(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Task Delete (Class)
     */
    static async delete<T extends Prisma.TaskDeleteArgs>(props: TaskDeleteProps<T>): Promise<TaskDeleteResponse<T>> {
        try {
            return await PrismaInstance.task.delete(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Task Create Many (Class)
     */
    static async createMany<T extends Prisma.TaskCreateManyArgs>(
        props: TaskCreateManyProps<T>,
    ): Promise<TaskCreateManyResponse> {
        try {
            return await PrismaInstance.task.createMany(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Task Update Many (Class)
     */
    static async updateMany<T extends Prisma.TaskUpdateManyArgs>(
        props: TaskUpdateManyProps<T>,
    ): Promise<TaskUpdateManyResponse> {
        try {
            return await PrismaInstance.task.updateMany(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Task Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.TaskDeleteManyArgs>(
        props: TaskDeleteManyProps<T>,
    ): Promise<TaskDeleteManyResponse> {
        try {
            return await PrismaInstance.task.deleteMany(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Task Find First (Class)
     */
    static async findFirst<T extends Prisma.TaskFindFirstArgs>(
        props: TaskFindFirstProps<T>,
    ): Promise<TaskFindFirstResponse<T>> {
        try {
            return await PrismaInstance.task.findFirst(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Task Find Unique (Class)
     */
    static async findUnique<T extends Prisma.TaskFindUniqueArgs>(
        props: TaskFindUniqueProps<T>,
    ): Promise<TaskFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.task.findUnique(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Task Find Many (Class)
     */
    static async findMany<T extends Prisma.TaskFindManyArgs>(
        props: TaskFindManyProps<T>,
    ): Promise<TaskFindManyResponse<T>> {
        try {
            return await PrismaInstance.task.findMany(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Task Count (Class)
     */
    static async count<T extends Prisma.TaskCountArgs>(props: TaskCountProps<T>): Promise<TaskCountResponse<T>> {
        try {
            return await PrismaInstance.task.count(props);
        } catch (error) {
            throw TaskService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
