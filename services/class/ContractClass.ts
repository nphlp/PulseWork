import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    ContractCountProps,
    ContractCountResponse,
    ContractCreateManyProps,
    ContractCreateManyResponse,
    ContractCreateProps,
    ContractCreateResponse,
    ContractDeleteManyProps,
    ContractDeleteManyResponse,
    ContractDeleteProps,
    ContractDeleteResponse,
    ContractFindFirstProps,
    ContractFindFirstResponse,
    ContractFindManyProps,
    ContractFindManyResponse,
    ContractFindUniqueProps,
    ContractFindUniqueResponse,
    ContractUpdateManyProps,
    ContractUpdateManyResponse,
    ContractUpdateProps,
    ContractUpdateResponse,
    ContractUpsertProps,
    ContractUpsertResponse,
} from "@services/types";

/**
 * # Contract Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Contract Class
 */
export default class ContractService {
    /**
     * ## Contract Create (Class)
     */
    static async create<T extends Prisma.ContractCreateArgs>(
        props: ContractCreateProps<T>,
    ): Promise<ContractCreateResponse<T>> {
        try {
            return await PrismaInstance.contract.create(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Contract Upsert (Class)
     */
    static async upsert<T extends Prisma.ContractUpsertArgs>(
        props: ContractUpsertProps<T>,
    ): Promise<ContractUpsertResponse<T>> {
        try {
            return await PrismaInstance.contract.upsert(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Contract Update (Class)
     */
    static async update<T extends Prisma.ContractUpdateArgs>(
        props: ContractUpdateProps<T>,
    ): Promise<ContractUpdateResponse<T>> {
        try {
            return await PrismaInstance.contract.update(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Contract Delete (Class)
     */
    static async delete<T extends Prisma.ContractDeleteArgs>(
        props: ContractDeleteProps<T>,
    ): Promise<ContractDeleteResponse<T>> {
        try {
            return await PrismaInstance.contract.delete(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Contract Create Many (Class)
     */
    static async createMany<T extends Prisma.ContractCreateManyArgs>(
        props: ContractCreateManyProps<T>,
    ): Promise<ContractCreateManyResponse> {
        try {
            return await PrismaInstance.contract.createMany(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Contract Update Many (Class)
     */
    static async updateMany<T extends Prisma.ContractUpdateManyArgs>(
        props: ContractUpdateManyProps<T>,
    ): Promise<ContractUpdateManyResponse> {
        try {
            return await PrismaInstance.contract.updateMany(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Contract Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.ContractDeleteManyArgs>(
        props: ContractDeleteManyProps<T>,
    ): Promise<ContractDeleteManyResponse> {
        try {
            return await PrismaInstance.contract.deleteMany(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Contract Find First (Class)
     */
    static async findFirst<T extends Prisma.ContractFindFirstArgs>(
        props: ContractFindFirstProps<T>,
    ): Promise<ContractFindFirstResponse<T>> {
        try {
            return await PrismaInstance.contract.findFirst(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Contract Find Unique (Class)
     */
    static async findUnique<T extends Prisma.ContractFindUniqueArgs>(
        props: ContractFindUniqueProps<T>,
    ): Promise<ContractFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.contract.findUnique(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Contract Find Many (Class)
     */
    static async findMany<T extends Prisma.ContractFindManyArgs>(
        props: ContractFindManyProps<T>,
    ): Promise<ContractFindManyResponse<T>> {
        try {
            return await PrismaInstance.contract.findMany(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Contract Count (Class)
     */
    static async count<T extends Prisma.ContractCountArgs>(
        props: ContractCountProps<T>,
    ): Promise<ContractCountResponse<T>> {
        try {
            return await PrismaInstance.contract.count(props);
        } catch (error) {
            throw ContractService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
