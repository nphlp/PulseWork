"use server";

import WorkService from "@class/WorkClass";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Work Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type WorkCreateProps<T extends Prisma.WorkCreateArgs> = Prisma.SelectSubset<T, Prisma.WorkCreateArgs>;
type WorkCreateResponse<T extends Prisma.WorkCreateArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type WorkUpsertProps<T extends Prisma.WorkUpsertArgs> = Prisma.SelectSubset<T, Prisma.WorkUpsertArgs>;
type WorkUpsertResponse<T extends Prisma.WorkUpsertArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type WorkUpdateProps<T extends Prisma.WorkUpdateArgs> = Prisma.SelectSubset<T, Prisma.WorkUpdateArgs>;
type WorkUpdateResponse<T extends Prisma.WorkUpdateArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type WorkDeleteProps<T extends Prisma.WorkDeleteArgs> = Prisma.SelectSubset<T, Prisma.WorkDeleteArgs>;
type WorkDeleteResponse<T extends Prisma.WorkDeleteArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type WorkCreateManyProps<T extends Prisma.WorkCreateManyArgs> = Prisma.SelectSubset<T, Prisma.WorkCreateManyArgs>;
type WorkCreateManyResponse = Prisma.BatchPayload;

// Update Many
type WorkUpdateManyProps<T extends Prisma.WorkUpdateManyArgs> = Prisma.SelectSubset<T, Prisma.WorkUpdateManyArgs>;
type WorkUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type WorkDeleteManyProps<T extends Prisma.WorkDeleteManyArgs> = Prisma.SelectSubset<T, Prisma.WorkDeleteManyArgs>;
type WorkDeleteManyResponse = Prisma.BatchPayload;

// Find First
type WorkFindFirstProps<T extends Prisma.WorkFindFirstArgs> = Prisma.SelectSubset<T, Prisma.WorkFindFirstArgs>;
type WorkFindFirstResponse<T extends Prisma.WorkFindFirstArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type WorkFindUniqueProps<T extends Prisma.WorkFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.WorkFindUniqueArgs>;
type WorkFindUniqueResponse<T extends Prisma.WorkFindUniqueArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type WorkFindManyProps<T extends Prisma.WorkFindManyArgs> = Prisma.SelectSubset<T, Prisma.WorkFindManyArgs>;
type WorkFindManyResponse<T extends Prisma.WorkFindManyArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type WorkCountProps<T extends Prisma.WorkCountArgs> = Prisma.SelectSubset<T, Prisma.WorkCountArgs>;
type WorkCountResponse<T extends Prisma.WorkCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.WorkCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Work Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkCreateAction = async <T extends Prisma.WorkCreateArgs>(
    props: WorkCreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkCreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkCreateAction", "Work", "create");
    return await WorkService.create(props);
};

/**
 * ## Work Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkUpsertAction = async <T extends Prisma.WorkUpsertArgs>(
    props: WorkUpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkUpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkUpsertAction", "Work", "upsert");
    return await WorkService.upsert(props);
};

/**
 * ## Work Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkUpdateAction = async <T extends Prisma.WorkUpdateArgs>(
    props: WorkUpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkUpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkUpdateAction", "Work", "update");
    return await WorkService.update(props);
};

/**
 * ## Work Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkDeleteAction = async <T extends Prisma.WorkDeleteArgs>(
    props: WorkDeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDeleteAction", "Work", "delete");
    return await WorkService.delete(props);
};

/**
 * ## Work Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkCreateManyAction = async <T extends Prisma.WorkCreateManyArgs>(
    props: WorkCreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkCreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkCreateManyAction", "Work", "createMany");
    return await WorkService.createMany(props);
};

/**
 * ## Work Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkUpdateManyAction = async <T extends Prisma.WorkUpdateManyArgs>(
    props: WorkUpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkUpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkUpdateManyAction", "Work", "updateMany");
    return await WorkService.updateMany(props);
};

/**
 * ## Work Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkDeleteManyAction = async <T extends Prisma.WorkDeleteManyArgs>(
    props: WorkDeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDeleteManyAction", "Work", "deleteMany");
    return await WorkService.deleteMany(props);
};

/**
 * ## Work Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkFindFirstAction = async <T extends Prisma.WorkFindFirstArgs>(
    props: WorkFindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkFindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkFindFirstAction", "Work", "findFirst");
    return await WorkService.findFirst(props);
};

/**
 * ## Work Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkFindUniqueAction = async <T extends Prisma.WorkFindUniqueArgs>(
    props: WorkFindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkFindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkFindUniqueAction", "Work", "findUnique");
    return await WorkService.findUnique(props);
};

/**
 * ## Work Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkFindManyAction = async <T extends Prisma.WorkFindManyArgs>(
    props: WorkFindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkFindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkFindManyAction", "Work", "findMany");
    return await WorkService.findMany(props);
};

/**
 * ## Work Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkCountAction = async <T extends Prisma.WorkCountArgs>(
    props: WorkCountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkCountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkCountAction", "Work", "count");
    return await WorkService.count(props);
};
