"use server";

import TeamMemberService from "@class/TeamMemberClass";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # TeamMember Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type TeamMemberCreateProps<T extends Prisma.TeamMemberCreateArgs> = Prisma.SelectSubset<T, Prisma.TeamMemberCreateArgs>;
type TeamMemberCreateResponse<T extends Prisma.TeamMemberCreateArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type TeamMemberUpsertProps<T extends Prisma.TeamMemberUpsertArgs> = Prisma.SelectSubset<T, Prisma.TeamMemberUpsertArgs>;
type TeamMemberUpsertResponse<T extends Prisma.TeamMemberUpsertArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type TeamMemberUpdateProps<T extends Prisma.TeamMemberUpdateArgs> = Prisma.SelectSubset<T, Prisma.TeamMemberUpdateArgs>;
type TeamMemberUpdateResponse<T extends Prisma.TeamMemberUpdateArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type TeamMemberDeleteProps<T extends Prisma.TeamMemberDeleteArgs> = Prisma.SelectSubset<T, Prisma.TeamMemberDeleteArgs>;
type TeamMemberDeleteResponse<T extends Prisma.TeamMemberDeleteArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type TeamMemberCreateManyProps<T extends Prisma.TeamMemberCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberCreateManyArgs
>;
type TeamMemberCreateManyResponse = Prisma.BatchPayload;

// Update Many
type TeamMemberUpdateManyProps<T extends Prisma.TeamMemberUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberUpdateManyArgs
>;
type TeamMemberUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type TeamMemberDeleteManyProps<T extends Prisma.TeamMemberDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberDeleteManyArgs
>;
type TeamMemberDeleteManyResponse = Prisma.BatchPayload;

// Find First
type TeamMemberFindFirstProps<T extends Prisma.TeamMemberFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberFindFirstArgs
>;
type TeamMemberFindFirstResponse<T extends Prisma.TeamMemberFindFirstArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TeamMemberFindUniqueProps<T extends Prisma.TeamMemberFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberFindUniqueArgs
>;
type TeamMemberFindUniqueResponse<T extends Prisma.TeamMemberFindUniqueArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TeamMemberFindManyProps<T extends Prisma.TeamMemberFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberFindManyArgs
>;
type TeamMemberFindManyResponse<T extends Prisma.TeamMemberFindManyArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TeamMemberCountProps<T extends Prisma.TeamMemberCountArgs> = Prisma.SelectSubset<T, Prisma.TeamMemberCountArgs>;
type TeamMemberCountResponse<T extends Prisma.TeamMemberCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TeamMemberCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## TeamMember Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamMemberCreateAction = async <T extends Prisma.TeamMemberCreateArgs>(
    props: TeamMemberCreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberCreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberCreateAction", "TeamMember", "create");
    return await TeamMemberService.create(props);
};

/**
 * ## TeamMember Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamMemberUpsertAction = async <T extends Prisma.TeamMemberUpsertArgs>(
    props: TeamMemberUpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberUpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberUpsertAction", "TeamMember", "upsert");
    return await TeamMemberService.upsert(props);
};

/**
 * ## TeamMember Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamMemberUpdateAction = async <T extends Prisma.TeamMemberUpdateArgs>(
    props: TeamMemberUpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberUpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberUpdateAction", "TeamMember", "update");
    return await TeamMemberService.update(props);
};

/**
 * ## TeamMember Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamMemberDeleteAction = async <T extends Prisma.TeamMemberDeleteArgs>(
    props: TeamMemberDeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberDeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberDeleteAction", "TeamMember", "delete");
    return await TeamMemberService.delete(props);
};

/**
 * ## TeamMember Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamMemberCreateManyAction = async <T extends Prisma.TeamMemberCreateManyArgs>(
    props: TeamMemberCreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberCreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberCreateManyAction", "TeamMember", "createMany");
    return await TeamMemberService.createMany(props);
};

/**
 * ## TeamMember Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamMemberUpdateManyAction = async <T extends Prisma.TeamMemberUpdateManyArgs>(
    props: TeamMemberUpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberUpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberUpdateManyAction", "TeamMember", "updateMany");
    return await TeamMemberService.updateMany(props);
};

/**
 * ## TeamMember Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamMemberDeleteManyAction = async <T extends Prisma.TeamMemberDeleteManyArgs>(
    props: TeamMemberDeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberDeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberDeleteManyAction", "TeamMember", "deleteMany");
    return await TeamMemberService.deleteMany(props);
};

/**
 * ## TeamMember Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TeamMemberFindFirstAction = async <T extends Prisma.TeamMemberFindFirstArgs>(
    props: TeamMemberFindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberFindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberFindFirstAction", "TeamMember", "findFirst");
    return await TeamMemberService.findFirst(props);
};

/**
 * ## TeamMember Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TeamMemberFindUniqueAction = async <T extends Prisma.TeamMemberFindUniqueArgs>(
    props: TeamMemberFindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberFindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberFindUniqueAction", "TeamMember", "findUnique");
    return await TeamMemberService.findUnique(props);
};

/**
 * ## TeamMember Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TeamMemberFindManyAction = async <T extends Prisma.TeamMemberFindManyArgs>(
    props: TeamMemberFindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberFindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberFindManyAction", "TeamMember", "findMany");
    return await TeamMemberService.findMany(props);
};

/**
 * ## TeamMember Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TeamMemberCountAction = async <T extends Prisma.TeamMemberCountArgs>(
    props: TeamMemberCountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamMemberCountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamMemberCountAction", "TeamMember", "count");
    return await TeamMemberService.count(props);
};
