"use server";

import TeamService from "@class/TeamClass";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Team Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type TeamCreateProps<T extends Prisma.TeamCreateArgs> = Prisma.SelectSubset<T, Prisma.TeamCreateArgs>;
type TeamCreateResponse<T extends Prisma.TeamCreateArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type TeamUpsertProps<T extends Prisma.TeamUpsertArgs> = Prisma.SelectSubset<T, Prisma.TeamUpsertArgs>;
type TeamUpsertResponse<T extends Prisma.TeamUpsertArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type TeamUpdateProps<T extends Prisma.TeamUpdateArgs> = Prisma.SelectSubset<T, Prisma.TeamUpdateArgs>;
type TeamUpdateResponse<T extends Prisma.TeamUpdateArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type TeamDeleteProps<T extends Prisma.TeamDeleteArgs> = Prisma.SelectSubset<T, Prisma.TeamDeleteArgs>;
type TeamDeleteResponse<T extends Prisma.TeamDeleteArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type TeamCreateManyProps<T extends Prisma.TeamCreateManyArgs> = Prisma.SelectSubset<T, Prisma.TeamCreateManyArgs>;
type TeamCreateManyResponse = Prisma.BatchPayload;

// Update Many
type TeamUpdateManyProps<T extends Prisma.TeamUpdateManyArgs> = Prisma.SelectSubset<T, Prisma.TeamUpdateManyArgs>;
type TeamUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type TeamDeleteManyProps<T extends Prisma.TeamDeleteManyArgs> = Prisma.SelectSubset<T, Prisma.TeamDeleteManyArgs>;
type TeamDeleteManyResponse = Prisma.BatchPayload;

// Find First
type TeamFindFirstProps<T extends Prisma.TeamFindFirstArgs> = Prisma.SelectSubset<T, Prisma.TeamFindFirstArgs>;
type TeamFindFirstResponse<T extends Prisma.TeamFindFirstArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TeamFindUniqueProps<T extends Prisma.TeamFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.TeamFindUniqueArgs>;
type TeamFindUniqueResponse<T extends Prisma.TeamFindUniqueArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TeamFindManyProps<T extends Prisma.TeamFindManyArgs> = Prisma.SelectSubset<T, Prisma.TeamFindManyArgs>;
type TeamFindManyResponse<T extends Prisma.TeamFindManyArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TeamCountProps<T extends Prisma.TeamCountArgs> = Prisma.SelectSubset<T, Prisma.TeamCountArgs>;
type TeamCountResponse<T extends Prisma.TeamCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TeamCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Team Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamCreateAction = async <T extends Prisma.TeamCreateArgs>(
    props: TeamCreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamCreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamCreateAction", "Team", "create");
    return await TeamService.create(props);
};

/**
 * ## Team Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamUpsertAction = async <T extends Prisma.TeamUpsertArgs>(
    props: TeamUpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamUpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamUpsertAction", "Team", "upsert");
    return await TeamService.upsert(props);
};

/**
 * ## Team Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamUpdateAction = async <T extends Prisma.TeamUpdateArgs>(
    props: TeamUpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamUpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamUpdateAction", "Team", "update");
    return await TeamService.update(props);
};

/**
 * ## Team Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamDeleteAction = async <T extends Prisma.TeamDeleteArgs>(
    props: TeamDeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamDeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamDeleteAction", "Team", "delete");
    return await TeamService.delete(props);
};

/**
 * ## Team Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamCreateManyAction = async <T extends Prisma.TeamCreateManyArgs>(
    props: TeamCreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamCreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamCreateManyAction", "Team", "createMany");
    return await TeamService.createMany(props);
};

/**
 * ## Team Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamUpdateManyAction = async <T extends Prisma.TeamUpdateManyArgs>(
    props: TeamUpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamUpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamUpdateManyAction", "Team", "updateMany");
    return await TeamService.updateMany(props);
};

/**
 * ## Team Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TeamDeleteManyAction = async <T extends Prisma.TeamDeleteManyArgs>(
    props: TeamDeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamDeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamDeleteManyAction", "Team", "deleteMany");
    return await TeamService.deleteMany(props);
};

/**
 * ## Team Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TeamFindFirstAction = async <T extends Prisma.TeamFindFirstArgs>(
    props: TeamFindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamFindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamFindFirstAction", "Team", "findFirst");
    return await TeamService.findFirst(props);
};

/**
 * ## Team Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TeamFindUniqueAction = async <T extends Prisma.TeamFindUniqueArgs>(
    props: TeamFindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamFindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamFindUniqueAction", "Team", "findUnique");
    return await TeamService.findUnique(props);
};

/**
 * ## Team Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TeamFindManyAction = async <T extends Prisma.TeamFindManyArgs>(
    props: TeamFindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamFindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamFindManyAction", "Team", "findMany");
    return await TeamService.findMany(props);
};

/**
 * ## Team Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TeamCountAction = async <T extends Prisma.TeamCountArgs>(
    props: TeamCountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TeamCountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TeamCountAction", "Team", "count");
    return await TeamService.count(props);
};
