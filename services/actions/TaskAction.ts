"use server";

import TaskService from "@class/TaskClass";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Task Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type TaskCreateProps<T extends Prisma.TaskCreateArgs> = Prisma.SelectSubset<T, Prisma.TaskCreateArgs>;
type TaskCreateResponse<T extends Prisma.TaskCreateArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type TaskUpsertProps<T extends Prisma.TaskUpsertArgs> = Prisma.SelectSubset<T, Prisma.TaskUpsertArgs>;
type TaskUpsertResponse<T extends Prisma.TaskUpsertArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type TaskUpdateProps<T extends Prisma.TaskUpdateArgs> = Prisma.SelectSubset<T, Prisma.TaskUpdateArgs>;
type TaskUpdateResponse<T extends Prisma.TaskUpdateArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type TaskDeleteProps<T extends Prisma.TaskDeleteArgs> = Prisma.SelectSubset<T, Prisma.TaskDeleteArgs>;
type TaskDeleteResponse<T extends Prisma.TaskDeleteArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type TaskCreateManyProps<T extends Prisma.TaskCreateManyArgs> = Prisma.SelectSubset<T, Prisma.TaskCreateManyArgs>;
type TaskCreateManyResponse = Prisma.BatchPayload;

// Update Many
type TaskUpdateManyProps<T extends Prisma.TaskUpdateManyArgs> = Prisma.SelectSubset<T, Prisma.TaskUpdateManyArgs>;
type TaskUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type TaskDeleteManyProps<T extends Prisma.TaskDeleteManyArgs> = Prisma.SelectSubset<T, Prisma.TaskDeleteManyArgs>;
type TaskDeleteManyResponse = Prisma.BatchPayload;

// Find First
type TaskFindFirstProps<T extends Prisma.TaskFindFirstArgs> = Prisma.SelectSubset<T, Prisma.TaskFindFirstArgs>;
type TaskFindFirstResponse<T extends Prisma.TaskFindFirstArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TaskFindUniqueProps<T extends Prisma.TaskFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.TaskFindUniqueArgs>;
type TaskFindUniqueResponse<T extends Prisma.TaskFindUniqueArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TaskFindManyProps<T extends Prisma.TaskFindManyArgs> = Prisma.SelectSubset<T, Prisma.TaskFindManyArgs>;
type TaskFindManyResponse<T extends Prisma.TaskFindManyArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TaskCountProps<T extends Prisma.TaskCountArgs> = Prisma.SelectSubset<T, Prisma.TaskCountArgs>;
type TaskCountResponse<T extends Prisma.TaskCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TaskCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Task Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TaskCreateAction = async <T extends Prisma.TaskCreateArgs>(
    props: TaskCreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskCreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskCreateAction", "Task", "create");
    return await TaskService.create(props);
};

/**
 * ## Task Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TaskUpsertAction = async <T extends Prisma.TaskUpsertArgs>(
    props: TaskUpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskUpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskUpsertAction", "Task", "upsert");
    return await TaskService.upsert(props);
};

/**
 * ## Task Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TaskUpdateAction = async <T extends Prisma.TaskUpdateArgs>(
    props: TaskUpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskUpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskUpdateAction", "Task", "update");
    return await TaskService.update(props);
};

/**
 * ## Task Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TaskDeleteAction = async <T extends Prisma.TaskDeleteArgs>(
    props: TaskDeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskDeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskDeleteAction", "Task", "delete");
    return await TaskService.delete(props);
};

/**
 * ## Task Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TaskCreateManyAction = async <T extends Prisma.TaskCreateManyArgs>(
    props: TaskCreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskCreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskCreateManyAction", "Task", "createMany");
    return await TaskService.createMany(props);
};

/**
 * ## Task Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TaskUpdateManyAction = async <T extends Prisma.TaskUpdateManyArgs>(
    props: TaskUpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskUpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskUpdateManyAction", "Task", "updateMany");
    return await TaskService.updateMany(props);
};

/**
 * ## Task Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TaskDeleteManyAction = async <T extends Prisma.TaskDeleteManyArgs>(
    props: TaskDeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskDeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskDeleteManyAction", "Task", "deleteMany");
    return await TaskService.deleteMany(props);
};

/**
 * ## Task Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TaskFindFirstAction = async <T extends Prisma.TaskFindFirstArgs>(
    props: TaskFindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskFindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskFindFirstAction", "Task", "findFirst");
    return await TaskService.findFirst(props);
};

/**
 * ## Task Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TaskFindUniqueAction = async <T extends Prisma.TaskFindUniqueArgs>(
    props: TaskFindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskFindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskFindUniqueAction", "Task", "findUnique");
    return await TaskService.findUnique(props);
};

/**
 * ## Task Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TaskFindManyAction = async <T extends Prisma.TaskFindManyArgs>(
    props: TaskFindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskFindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskFindManyAction", "Task", "findMany");
    return await TaskService.findMany(props);
};

/**
 * ## Task Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TaskCountAction = async <T extends Prisma.TaskCountArgs>(
    props: TaskCountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TaskCountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TaskCountAction", "Task", "count");
    return await TaskService.count(props);
};
