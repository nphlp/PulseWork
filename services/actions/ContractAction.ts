"use server";

import ContractService from "@class/ContractClass";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Contract Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type ContractCreateProps<T extends Prisma.ContractCreateArgs> = Prisma.SelectSubset<T, Prisma.ContractCreateArgs>;
type ContractCreateResponse<T extends Prisma.ContractCreateArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type ContractUpsertProps<T extends Prisma.ContractUpsertArgs> = Prisma.SelectSubset<T, Prisma.ContractUpsertArgs>;
type ContractUpsertResponse<T extends Prisma.ContractUpsertArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type ContractUpdateProps<T extends Prisma.ContractUpdateArgs> = Prisma.SelectSubset<T, Prisma.ContractUpdateArgs>;
type ContractUpdateResponse<T extends Prisma.ContractUpdateArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type ContractDeleteProps<T extends Prisma.ContractDeleteArgs> = Prisma.SelectSubset<T, Prisma.ContractDeleteArgs>;
type ContractDeleteResponse<T extends Prisma.ContractDeleteArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type ContractCreateManyProps<T extends Prisma.ContractCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractCreateManyArgs
>;
type ContractCreateManyResponse = Prisma.BatchPayload;

// Update Many
type ContractUpdateManyProps<T extends Prisma.ContractUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractUpdateManyArgs
>;
type ContractUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type ContractDeleteManyProps<T extends Prisma.ContractDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractDeleteManyArgs
>;
type ContractDeleteManyResponse = Prisma.BatchPayload;

// Find First
type ContractFindFirstProps<T extends Prisma.ContractFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractFindFirstArgs
>;
type ContractFindFirstResponse<T extends Prisma.ContractFindFirstArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type ContractFindUniqueProps<T extends Prisma.ContractFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractFindUniqueArgs
>;
type ContractFindUniqueResponse<T extends Prisma.ContractFindUniqueArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type ContractFindManyProps<T extends Prisma.ContractFindManyArgs> = Prisma.SelectSubset<T, Prisma.ContractFindManyArgs>;
type ContractFindManyResponse<T extends Prisma.ContractFindManyArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type ContractCountProps<T extends Prisma.ContractCountArgs> = Prisma.SelectSubset<T, Prisma.ContractCountArgs>;
type ContractCountResponse<T extends Prisma.ContractCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ContractCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Contract Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ContractCreateAction = async <T extends Prisma.ContractCreateArgs>(
    props: ContractCreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractCreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractCreateAction", "Contract", "create");
    return await ContractService.create(props);
};

/**
 * ## Contract Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ContractUpsertAction = async <T extends Prisma.ContractUpsertArgs>(
    props: ContractUpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractUpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractUpsertAction", "Contract", "upsert");
    return await ContractService.upsert(props);
};

/**
 * ## Contract Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ContractUpdateAction = async <T extends Prisma.ContractUpdateArgs>(
    props: ContractUpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractUpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractUpdateAction", "Contract", "update");
    return await ContractService.update(props);
};

/**
 * ## Contract Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ContractDeleteAction = async <T extends Prisma.ContractDeleteArgs>(
    props: ContractDeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractDeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractDeleteAction", "Contract", "delete");
    return await ContractService.delete(props);
};

/**
 * ## Contract Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ContractCreateManyAction = async <T extends Prisma.ContractCreateManyArgs>(
    props: ContractCreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractCreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractCreateManyAction", "Contract", "createMany");
    return await ContractService.createMany(props);
};

/**
 * ## Contract Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ContractUpdateManyAction = async <T extends Prisma.ContractUpdateManyArgs>(
    props: ContractUpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractUpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractUpdateManyAction", "Contract", "updateMany");
    return await ContractService.updateMany(props);
};

/**
 * ## Contract Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ContractDeleteManyAction = async <T extends Prisma.ContractDeleteManyArgs>(
    props: ContractDeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractDeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractDeleteManyAction", "Contract", "deleteMany");
    return await ContractService.deleteMany(props);
};

/**
 * ## Contract Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ContractFindFirstAction = async <T extends Prisma.ContractFindFirstArgs>(
    props: ContractFindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractFindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractFindFirstAction", "Contract", "findFirst");
    return await ContractService.findFirst(props);
};

/**
 * ## Contract Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ContractFindUniqueAction = async <T extends Prisma.ContractFindUniqueArgs>(
    props: ContractFindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractFindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractFindUniqueAction", "Contract", "findUnique");
    return await ContractService.findUnique(props);
};

/**
 * ## Contract Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ContractFindManyAction = async <T extends Prisma.ContractFindManyArgs>(
    props: ContractFindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractFindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractFindManyAction", "Contract", "findMany");
    return await ContractService.findMany(props);
};

/**
 * ## Contract Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ContractCountAction = async <T extends Prisma.ContractCountArgs>(
    props: ContractCountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<ContractCountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "ContractCountAction", "Contract", "count");
    return await ContractService.count(props);
};
