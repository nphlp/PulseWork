"use server";

import LeaveService from "@class/LeaveClass";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Leave Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type LeaveCreateProps<T extends Prisma.LeaveCreateArgs> = Prisma.SelectSubset<T, Prisma.LeaveCreateArgs>;
type LeaveCreateResponse<T extends Prisma.LeaveCreateArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type LeaveUpsertProps<T extends Prisma.LeaveUpsertArgs> = Prisma.SelectSubset<T, Prisma.LeaveUpsertArgs>;
type LeaveUpsertResponse<T extends Prisma.LeaveUpsertArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type LeaveUpdateProps<T extends Prisma.LeaveUpdateArgs> = Prisma.SelectSubset<T, Prisma.LeaveUpdateArgs>;
type LeaveUpdateResponse<T extends Prisma.LeaveUpdateArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type LeaveDeleteProps<T extends Prisma.LeaveDeleteArgs> = Prisma.SelectSubset<T, Prisma.LeaveDeleteArgs>;
type LeaveDeleteResponse<T extends Prisma.LeaveDeleteArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type LeaveCreateManyProps<T extends Prisma.LeaveCreateManyArgs> = Prisma.SelectSubset<T, Prisma.LeaveCreateManyArgs>;
type LeaveCreateManyResponse = Prisma.BatchPayload;

// Update Many
type LeaveUpdateManyProps<T extends Prisma.LeaveUpdateManyArgs> = Prisma.SelectSubset<T, Prisma.LeaveUpdateManyArgs>;
type LeaveUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type LeaveDeleteManyProps<T extends Prisma.LeaveDeleteManyArgs> = Prisma.SelectSubset<T, Prisma.LeaveDeleteManyArgs>;
type LeaveDeleteManyResponse = Prisma.BatchPayload;

// Find First
type LeaveFindFirstProps<T extends Prisma.LeaveFindFirstArgs> = Prisma.SelectSubset<T, Prisma.LeaveFindFirstArgs>;
type LeaveFindFirstResponse<T extends Prisma.LeaveFindFirstArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type LeaveFindUniqueProps<T extends Prisma.LeaveFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.LeaveFindUniqueArgs>;
type LeaveFindUniqueResponse<T extends Prisma.LeaveFindUniqueArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type LeaveFindManyProps<T extends Prisma.LeaveFindManyArgs> = Prisma.SelectSubset<T, Prisma.LeaveFindManyArgs>;
type LeaveFindManyResponse<T extends Prisma.LeaveFindManyArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type LeaveCountProps<T extends Prisma.LeaveCountArgs> = Prisma.SelectSubset<T, Prisma.LeaveCountArgs>;
type LeaveCountResponse<T extends Prisma.LeaveCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.LeaveCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Leave Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const LeaveCreateAction = async <T extends Prisma.LeaveCreateArgs>(
    props: LeaveCreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveCreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveCreateAction", "Leave", "create");
    return await LeaveService.create(props);
};

/**
 * ## Leave Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const LeaveUpsertAction = async <T extends Prisma.LeaveUpsertArgs>(
    props: LeaveUpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveUpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveUpsertAction", "Leave", "upsert");
    return await LeaveService.upsert(props);
};

/**
 * ## Leave Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const LeaveUpdateAction = async <T extends Prisma.LeaveUpdateArgs>(
    props: LeaveUpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveUpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveUpdateAction", "Leave", "update");
    return await LeaveService.update(props);
};

/**
 * ## Leave Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const LeaveDeleteAction = async <T extends Prisma.LeaveDeleteArgs>(
    props: LeaveDeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveDeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveDeleteAction", "Leave", "delete");
    return await LeaveService.delete(props);
};

/**
 * ## Leave Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const LeaveCreateManyAction = async <T extends Prisma.LeaveCreateManyArgs>(
    props: LeaveCreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveCreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveCreateManyAction", "Leave", "createMany");
    return await LeaveService.createMany(props);
};

/**
 * ## Leave Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const LeaveUpdateManyAction = async <T extends Prisma.LeaveUpdateManyArgs>(
    props: LeaveUpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveUpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveUpdateManyAction", "Leave", "updateMany");
    return await LeaveService.updateMany(props);
};

/**
 * ## Leave Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const LeaveDeleteManyAction = async <T extends Prisma.LeaveDeleteManyArgs>(
    props: LeaveDeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveDeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveDeleteManyAction", "Leave", "deleteMany");
    return await LeaveService.deleteMany(props);
};

/**
 * ## Leave Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const LeaveFindFirstAction = async <T extends Prisma.LeaveFindFirstArgs>(
    props: LeaveFindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveFindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveFindFirstAction", "Leave", "findFirst");
    return await LeaveService.findFirst(props);
};

/**
 * ## Leave Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const LeaveFindUniqueAction = async <T extends Prisma.LeaveFindUniqueArgs>(
    props: LeaveFindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveFindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveFindUniqueAction", "Leave", "findUnique");
    return await LeaveService.findUnique(props);
};

/**
 * ## Leave Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const LeaveFindManyAction = async <T extends Prisma.LeaveFindManyArgs>(
    props: LeaveFindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveFindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveFindManyAction", "Leave", "findMany");
    return await LeaveService.findMany(props);
};

/**
 * ## Leave Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const LeaveCountAction = async <T extends Prisma.LeaveCountArgs>(
    props: LeaveCountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<LeaveCountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "LeaveCountAction", "Leave", "count");
    return await LeaveService.count(props);
};
