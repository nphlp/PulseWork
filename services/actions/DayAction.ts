"use server";

import DayService from "@class/DayClass";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Day Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type DayCreateProps<T extends Prisma.DayCreateArgs> = Prisma.SelectSubset<T, Prisma.DayCreateArgs>;
type DayCreateResponse<T extends Prisma.DayCreateArgs> = GetResult<
    Prisma.$DayPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type DayUpsertProps<T extends Prisma.DayUpsertArgs> = Prisma.SelectSubset<T, Prisma.DayUpsertArgs>;
type DayUpsertResponse<T extends Prisma.DayUpsertArgs> = GetResult<
    Prisma.$DayPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type DayUpdateProps<T extends Prisma.DayUpdateArgs> = Prisma.SelectSubset<T, Prisma.DayUpdateArgs>;
type DayUpdateResponse<T extends Prisma.DayUpdateArgs> = GetResult<
    Prisma.$DayPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type DayDeleteProps<T extends Prisma.DayDeleteArgs> = Prisma.SelectSubset<T, Prisma.DayDeleteArgs>;
type DayDeleteResponse<T extends Prisma.DayDeleteArgs> = GetResult<
    Prisma.$DayPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type DayCreateManyProps<T extends Prisma.DayCreateManyArgs> = Prisma.SelectSubset<T, Prisma.DayCreateManyArgs>;
type DayCreateManyResponse = Prisma.BatchPayload;

// Update Many
type DayUpdateManyProps<T extends Prisma.DayUpdateManyArgs> = Prisma.SelectSubset<T, Prisma.DayUpdateManyArgs>;
type DayUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type DayDeleteManyProps<T extends Prisma.DayDeleteManyArgs> = Prisma.SelectSubset<T, Prisma.DayDeleteManyArgs>;
type DayDeleteManyResponse = Prisma.BatchPayload;

// Find First
type DayFindFirstProps<T extends Prisma.DayFindFirstArgs> = Prisma.SelectSubset<T, Prisma.DayFindFirstArgs>;
type DayFindFirstResponse<T extends Prisma.DayFindFirstArgs> = GetResult<
    Prisma.$DayPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type DayFindUniqueProps<T extends Prisma.DayFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.DayFindUniqueArgs>;
type DayFindUniqueResponse<T extends Prisma.DayFindUniqueArgs> = GetResult<
    Prisma.$DayPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type DayFindManyProps<T extends Prisma.DayFindManyArgs> = Prisma.SelectSubset<T, Prisma.DayFindManyArgs>;
type DayFindManyResponse<T extends Prisma.DayFindManyArgs> = GetResult<
    Prisma.$DayPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type DayCountProps<T extends Prisma.DayCountArgs> = Prisma.SelectSubset<T, Prisma.DayCountArgs>;
type DayCountResponse<T extends Prisma.DayCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.DayCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Day Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const DayCreateAction = async <T extends Prisma.DayCreateArgs>(
    props: DayCreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayCreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "DayCreateAction", "Day", "create");
    return await DayService.create(props);
};

/**
 * ## Day Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const DayUpsertAction = async <T extends Prisma.DayUpsertArgs>(
    props: DayUpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayUpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "DayUpsertAction", "Day", "upsert");
    return await DayService.upsert(props);
};

/**
 * ## Day Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const DayUpdateAction = async <T extends Prisma.DayUpdateArgs>(
    props: DayUpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayUpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "DayUpdateAction", "Day", "update");
    return await DayService.update(props);
};

/**
 * ## Day Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const DayDeleteAction = async <T extends Prisma.DayDeleteArgs>(
    props: DayDeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayDeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "DayDeleteAction", "Day", "delete");
    return await DayService.delete(props);
};

/**
 * ## Day Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const DayCreateManyAction = async <T extends Prisma.DayCreateManyArgs>(
    props: DayCreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayCreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "DayCreateManyAction", "Day", "createMany");
    return await DayService.createMany(props);
};

/**
 * ## Day Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const DayUpdateManyAction = async <T extends Prisma.DayUpdateManyArgs>(
    props: DayUpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayUpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "DayUpdateManyAction", "Day", "updateMany");
    return await DayService.updateMany(props);
};

/**
 * ## Day Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const DayDeleteManyAction = async <T extends Prisma.DayDeleteManyArgs>(
    props: DayDeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayDeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "DayDeleteManyAction", "Day", "deleteMany");
    return await DayService.deleteMany(props);
};

/**
 * ## Day Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const DayFindFirstAction = async <T extends Prisma.DayFindFirstArgs>(
    props: DayFindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayFindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "DayFindFirstAction", "Day", "findFirst");
    return await DayService.findFirst(props);
};

/**
 * ## Day Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const DayFindUniqueAction = async <T extends Prisma.DayFindUniqueArgs>(
    props: DayFindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayFindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "DayFindUniqueAction", "Day", "findUnique");
    return await DayService.findUnique(props);
};

/**
 * ## Day Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const DayFindManyAction = async <T extends Prisma.DayFindManyArgs>(
    props: DayFindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayFindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "DayFindManyAction", "Day", "findMany");
    return await DayService.findMany(props);
};

/**
 * ## Day Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const DayCountAction = async <T extends Prisma.DayCountArgs>(
    props: DayCountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<DayCountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "DayCountAction", "Day", "count");
    return await DayService.count(props);
};
