import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { LeaveCountCached, LeaveFindFirstCached, LeaveFindManyCached, LeaveFindUniqueCached } from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # Leave Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type LeaveFindFirstProps<T extends Prisma.LeaveFindFirstArgs> = Prisma.SelectSubset<T, Prisma.LeaveFindFirstArgs>;
type LeaveFindFirstResponse<T extends Prisma.LeaveFindFirstArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type LeaveFindUniqueProps<T extends Prisma.LeaveFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.LeaveFindUniqueArgs>;
type LeaveFindUniqueResponse<T extends Prisma.LeaveFindUniqueArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type LeaveFindManyProps<T extends Prisma.LeaveFindManyArgs> = Prisma.SelectSubset<T, Prisma.LeaveFindManyArgs>;
type LeaveFindManyResponse<T extends Prisma.LeaveFindManyArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type LeaveCountProps<T extends Prisma.LeaveCountArgs> = Prisma.SelectSubset<T, Prisma.LeaveCountArgs>;
type LeaveCountResponse<T extends Prisma.LeaveCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.LeaveCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type LeaveRoutes<Input> = {
    "/internal/leave/findFirst": <T extends Prisma.LeaveFindFirstArgs>() => {
        params: LeaveFindFirstProps<T>;
        response: LeaveFindFirstResponse<Input extends LeaveFindFirstProps<T> ? Input : never>;
    };
    "/internal/leave/findUnique": <T extends Prisma.LeaveFindUniqueArgs>() => {
        params: LeaveFindUniqueProps<T>;
        response: LeaveFindUniqueResponse<Input extends LeaveFindUniqueProps<T> ? Input : never>;
    };
    "/internal/leave/findMany": <T extends Prisma.LeaveFindManyArgs>() => {
        params: LeaveFindManyProps<T>;
        response: LeaveFindManyResponse<Input extends LeaveFindManyProps<T> ? Input : never>;
    };
    "/internal/leave/count": <T extends Prisma.LeaveCountArgs>() => {
        params: LeaveCountProps<T>;
        response: LeaveCountResponse<Input extends LeaveCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const LeaveFindFirstApi = async <T extends Prisma.LeaveFindFirstArgs>(
    request: NextRequest,
): RouteResponse<LeaveFindFirstResponse<T>> => {
    try {
        const params: LeaveFindFirstProps<T> = parseAndDecodeParams(request);
        const response: LeaveFindFirstResponse<T> = await LeaveFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const LeaveFindUniqueApi = async <T extends Prisma.LeaveFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<LeaveFindUniqueResponse<T>> => {
    try {
        const params: LeaveFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: LeaveFindUniqueResponse<T> = await LeaveFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const LeaveFindManyApi = async <T extends Prisma.LeaveFindManyArgs>(
    request: NextRequest,
): RouteResponse<LeaveFindManyResponse<T>> => {
    try {
        const params: LeaveFindManyProps<T> = parseAndDecodeParams(request);
        const response: LeaveFindManyResponse<T> = await LeaveFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const LeaveCountApi = async <T extends Prisma.LeaveCountArgs>(
    request: NextRequest,
): RouteResponse<LeaveCountResponse<T>> => {
    try {
        const params: LeaveCountProps<T> = parseAndDecodeParams(request);
        const response: LeaveCountResponse<T> = await LeaveCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
