import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { WorkCountCached, WorkFindFirstCached, WorkFindManyCached, WorkFindUniqueCached } from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # Work Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type WorkFindFirstProps<T extends Prisma.WorkFindFirstArgs> = Prisma.SelectSubset<T, Prisma.WorkFindFirstArgs>;
type WorkFindFirstResponse<T extends Prisma.WorkFindFirstArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type WorkFindUniqueProps<T extends Prisma.WorkFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.WorkFindUniqueArgs>;
type WorkFindUniqueResponse<T extends Prisma.WorkFindUniqueArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type WorkFindManyProps<T extends Prisma.WorkFindManyArgs> = Prisma.SelectSubset<T, Prisma.WorkFindManyArgs>;
type WorkFindManyResponse<T extends Prisma.WorkFindManyArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type WorkCountProps<T extends Prisma.WorkCountArgs> = Prisma.SelectSubset<T, Prisma.WorkCountArgs>;
type WorkCountResponse<T extends Prisma.WorkCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.WorkCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type WorkRoutes<Input> = {
    "/internal/work/findFirst": <T extends Prisma.WorkFindFirstArgs>() => {
        params: WorkFindFirstProps<T>;
        response: WorkFindFirstResponse<Input extends WorkFindFirstProps<T> ? Input : never>;
    };
    "/internal/work/findUnique": <T extends Prisma.WorkFindUniqueArgs>() => {
        params: WorkFindUniqueProps<T>;
        response: WorkFindUniqueResponse<Input extends WorkFindUniqueProps<T> ? Input : never>;
    };
    "/internal/work/findMany": <T extends Prisma.WorkFindManyArgs>() => {
        params: WorkFindManyProps<T>;
        response: WorkFindManyResponse<Input extends WorkFindManyProps<T> ? Input : never>;
    };
    "/internal/work/count": <T extends Prisma.WorkCountArgs>() => {
        params: WorkCountProps<T>;
        response: WorkCountResponse<Input extends WorkCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const WorkFindFirstApi = async <T extends Prisma.WorkFindFirstArgs>(
    request: NextRequest,
): RouteResponse<WorkFindFirstResponse<T>> => {
    try {
        const params: WorkFindFirstProps<T> = parseAndDecodeParams(request);
        const response: WorkFindFirstResponse<T> = await WorkFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const WorkFindUniqueApi = async <T extends Prisma.WorkFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<WorkFindUniqueResponse<T>> => {
    try {
        const params: WorkFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: WorkFindUniqueResponse<T> = await WorkFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const WorkFindManyApi = async <T extends Prisma.WorkFindManyArgs>(
    request: NextRequest,
): RouteResponse<WorkFindManyResponse<T>> => {
    try {
        const params: WorkFindManyProps<T> = parseAndDecodeParams(request);
        const response: WorkFindManyResponse<T> = await WorkFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const WorkCountApi = async <T extends Prisma.WorkCountArgs>(
    request: NextRequest,
): RouteResponse<WorkCountResponse<T>> => {
    try {
        const params: WorkCountProps<T> = parseAndDecodeParams(request);
        const response: WorkCountResponse<T> = await WorkCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
