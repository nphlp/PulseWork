import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { TaskCountCached, TaskFindFirstCached, TaskFindManyCached, TaskFindUniqueCached } from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # Task Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type TaskFindFirstProps<T extends Prisma.TaskFindFirstArgs> = Prisma.SelectSubset<T, Prisma.TaskFindFirstArgs>;
type TaskFindFirstResponse<T extends Prisma.TaskFindFirstArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TaskFindUniqueProps<T extends Prisma.TaskFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.TaskFindUniqueArgs>;
type TaskFindUniqueResponse<T extends Prisma.TaskFindUniqueArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TaskFindManyProps<T extends Prisma.TaskFindManyArgs> = Prisma.SelectSubset<T, Prisma.TaskFindManyArgs>;
type TaskFindManyResponse<T extends Prisma.TaskFindManyArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TaskCountProps<T extends Prisma.TaskCountArgs> = Prisma.SelectSubset<T, Prisma.TaskCountArgs>;
type TaskCountResponse<T extends Prisma.TaskCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TaskCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type TaskRoutes<Input> = {
    "/internal/task/findFirst": <T extends Prisma.TaskFindFirstArgs>() => {
        params: TaskFindFirstProps<T>;
        response: TaskFindFirstResponse<Input extends TaskFindFirstProps<T> ? Input : never>;
    };
    "/internal/task/findUnique": <T extends Prisma.TaskFindUniqueArgs>() => {
        params: TaskFindUniqueProps<T>;
        response: TaskFindUniqueResponse<Input extends TaskFindUniqueProps<T> ? Input : never>;
    };
    "/internal/task/findMany": <T extends Prisma.TaskFindManyArgs>() => {
        params: TaskFindManyProps<T>;
        response: TaskFindManyResponse<Input extends TaskFindManyProps<T> ? Input : never>;
    };
    "/internal/task/count": <T extends Prisma.TaskCountArgs>() => {
        params: TaskCountProps<T>;
        response: TaskCountResponse<Input extends TaskCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const TaskFindFirstApi = async <T extends Prisma.TaskFindFirstArgs>(
    request: NextRequest,
): RouteResponse<TaskFindFirstResponse<T>> => {
    try {
        const params: TaskFindFirstProps<T> = parseAndDecodeParams(request);
        const response: TaskFindFirstResponse<T> = await TaskFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TaskFindUniqueApi = async <T extends Prisma.TaskFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<TaskFindUniqueResponse<T>> => {
    try {
        const params: TaskFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: TaskFindUniqueResponse<T> = await TaskFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TaskFindManyApi = async <T extends Prisma.TaskFindManyArgs>(
    request: NextRequest,
): RouteResponse<TaskFindManyResponse<T>> => {
    try {
        const params: TaskFindManyProps<T> = parseAndDecodeParams(request);
        const response: TaskFindManyResponse<T> = await TaskFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TaskCountApi = async <T extends Prisma.TaskCountArgs>(
    request: NextRequest,
): RouteResponse<TaskCountResponse<T>> => {
    try {
        const params: TaskCountProps<T> = parseAndDecodeParams(request);
        const response: TaskCountResponse<T> = await TaskCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
