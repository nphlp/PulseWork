import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    ContractCountCached,
    ContractFindFirstCached,
    ContractFindManyCached,
    ContractFindUniqueCached,
} from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # Contract Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type ContractFindFirstProps<T extends Prisma.ContractFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractFindFirstArgs
>;
type ContractFindFirstResponse<T extends Prisma.ContractFindFirstArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type ContractFindUniqueProps<T extends Prisma.ContractFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractFindUniqueArgs
>;
type ContractFindUniqueResponse<T extends Prisma.ContractFindUniqueArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type ContractFindManyProps<T extends Prisma.ContractFindManyArgs> = Prisma.SelectSubset<T, Prisma.ContractFindManyArgs>;
type ContractFindManyResponse<T extends Prisma.ContractFindManyArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type ContractCountProps<T extends Prisma.ContractCountArgs> = Prisma.SelectSubset<T, Prisma.ContractCountArgs>;
type ContractCountResponse<T extends Prisma.ContractCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ContractCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type ContractRoutes<Input> = {
    "/internal/contract/findFirst": <T extends Prisma.ContractFindFirstArgs>() => {
        params: ContractFindFirstProps<T>;
        response: ContractFindFirstResponse<Input extends ContractFindFirstProps<T> ? Input : never>;
    };
    "/internal/contract/findUnique": <T extends Prisma.ContractFindUniqueArgs>() => {
        params: ContractFindUniqueProps<T>;
        response: ContractFindUniqueResponse<Input extends ContractFindUniqueProps<T> ? Input : never>;
    };
    "/internal/contract/findMany": <T extends Prisma.ContractFindManyArgs>() => {
        params: ContractFindManyProps<T>;
        response: ContractFindManyResponse<Input extends ContractFindManyProps<T> ? Input : never>;
    };
    "/internal/contract/count": <T extends Prisma.ContractCountArgs>() => {
        params: ContractCountProps<T>;
        response: ContractCountResponse<Input extends ContractCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const ContractFindFirstApi = async <T extends Prisma.ContractFindFirstArgs>(
    request: NextRequest,
): RouteResponse<ContractFindFirstResponse<T>> => {
    try {
        const params: ContractFindFirstProps<T> = parseAndDecodeParams(request);
        const response: ContractFindFirstResponse<T> = await ContractFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const ContractFindUniqueApi = async <T extends Prisma.ContractFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<ContractFindUniqueResponse<T>> => {
    try {
        const params: ContractFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: ContractFindUniqueResponse<T> = await ContractFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const ContractFindManyApi = async <T extends Prisma.ContractFindManyArgs>(
    request: NextRequest,
): RouteResponse<ContractFindManyResponse<T>> => {
    try {
        const params: ContractFindManyProps<T> = parseAndDecodeParams(request);
        const response: ContractFindManyResponse<T> = await ContractFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const ContractCountApi = async <T extends Prisma.ContractCountArgs>(
    request: NextRequest,
): RouteResponse<ContractCountResponse<T>> => {
    try {
        const params: ContractCountProps<T> = parseAndDecodeParams(request);
        const response: ContractCountResponse<T> = await ContractCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
