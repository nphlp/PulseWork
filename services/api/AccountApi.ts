import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    AccountCountCached,
    AccountFindFirstCached,
    AccountFindManyCached,
    AccountFindUniqueCached,
} from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # Account Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type AccountFindFirstProps<T extends Prisma.AccountFindFirstArgs> = Prisma.SelectSubset<T, Prisma.AccountFindFirstArgs>;
type AccountFindFirstResponse<T extends Prisma.AccountFindFirstArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type AccountFindUniqueProps<T extends Prisma.AccountFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountFindUniqueArgs
>;
type AccountFindUniqueResponse<T extends Prisma.AccountFindUniqueArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type AccountFindManyProps<T extends Prisma.AccountFindManyArgs> = Prisma.SelectSubset<T, Prisma.AccountFindManyArgs>;
type AccountFindManyResponse<T extends Prisma.AccountFindManyArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type AccountCountProps<T extends Prisma.AccountCountArgs> = Prisma.SelectSubset<T, Prisma.AccountCountArgs>;
type AccountCountResponse<T extends Prisma.AccountCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.AccountCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type AccountRoutes<Input> = {
    "/internal/account/findFirst": <T extends Prisma.AccountFindFirstArgs>() => {
        params: AccountFindFirstProps<T>;
        response: AccountFindFirstResponse<Input extends AccountFindFirstProps<T> ? Input : never>;
    };
    "/internal/account/findUnique": <T extends Prisma.AccountFindUniqueArgs>() => {
        params: AccountFindUniqueProps<T>;
        response: AccountFindUniqueResponse<Input extends AccountFindUniqueProps<T> ? Input : never>;
    };
    "/internal/account/findMany": <T extends Prisma.AccountFindManyArgs>() => {
        params: AccountFindManyProps<T>;
        response: AccountFindManyResponse<Input extends AccountFindManyProps<T> ? Input : never>;
    };
    "/internal/account/count": <T extends Prisma.AccountCountArgs>() => {
        params: AccountCountProps<T>;
        response: AccountCountResponse<Input extends AccountCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const AccountFindFirstApi = async <T extends Prisma.AccountFindFirstArgs>(
    request: NextRequest,
): RouteResponse<AccountFindFirstResponse<T>> => {
    try {
        const params: AccountFindFirstProps<T> = parseAndDecodeParams(request);
        const response: AccountFindFirstResponse<T> = await AccountFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const AccountFindUniqueApi = async <T extends Prisma.AccountFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<AccountFindUniqueResponse<T>> => {
    try {
        const params: AccountFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: AccountFindUniqueResponse<T> = await AccountFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const AccountFindManyApi = async <T extends Prisma.AccountFindManyArgs>(
    request: NextRequest,
): RouteResponse<AccountFindManyResponse<T>> => {
    try {
        const params: AccountFindManyProps<T> = parseAndDecodeParams(request);
        const response: AccountFindManyResponse<T> = await AccountFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const AccountCountApi = async <T extends Prisma.AccountCountArgs>(
    request: NextRequest,
): RouteResponse<AccountCountResponse<T>> => {
    try {
        const params: AccountCountProps<T> = parseAndDecodeParams(request);
        const response: AccountCountResponse<T> = await AccountCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
