import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { DayCountCached, DayFindFirstCached, DayFindManyCached, DayFindUniqueCached } from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # Day Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type DayFindFirstProps<T extends Prisma.DayFindFirstArgs> = Prisma.SelectSubset<T, Prisma.DayFindFirstArgs>;
type DayFindFirstResponse<T extends Prisma.DayFindFirstArgs> = GetResult<
    Prisma.$DayPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type DayFindUniqueProps<T extends Prisma.DayFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.DayFindUniqueArgs>;
type DayFindUniqueResponse<T extends Prisma.DayFindUniqueArgs> = GetResult<
    Prisma.$DayPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type DayFindManyProps<T extends Prisma.DayFindManyArgs> = Prisma.SelectSubset<T, Prisma.DayFindManyArgs>;
type DayFindManyResponse<T extends Prisma.DayFindManyArgs> = GetResult<
    Prisma.$DayPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type DayCountProps<T extends Prisma.DayCountArgs> = Prisma.SelectSubset<T, Prisma.DayCountArgs>;
type DayCountResponse<T extends Prisma.DayCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.DayCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type DayRoutes<Input> = {
    "/internal/day/findFirst": <T extends Prisma.DayFindFirstArgs>() => {
        params: DayFindFirstProps<T>;
        response: DayFindFirstResponse<Input extends DayFindFirstProps<T> ? Input : never>;
    };
    "/internal/day/findUnique": <T extends Prisma.DayFindUniqueArgs>() => {
        params: DayFindUniqueProps<T>;
        response: DayFindUniqueResponse<Input extends DayFindUniqueProps<T> ? Input : never>;
    };
    "/internal/day/findMany": <T extends Prisma.DayFindManyArgs>() => {
        params: DayFindManyProps<T>;
        response: DayFindManyResponse<Input extends DayFindManyProps<T> ? Input : never>;
    };
    "/internal/day/count": <T extends Prisma.DayCountArgs>() => {
        params: DayCountProps<T>;
        response: DayCountResponse<Input extends DayCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const DayFindFirstApi = async <T extends Prisma.DayFindFirstArgs>(
    request: NextRequest,
): RouteResponse<DayFindFirstResponse<T>> => {
    try {
        const params: DayFindFirstProps<T> = parseAndDecodeParams(request);
        const response: DayFindFirstResponse<T> = await DayFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const DayFindUniqueApi = async <T extends Prisma.DayFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<DayFindUniqueResponse<T>> => {
    try {
        const params: DayFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: DayFindUniqueResponse<T> = await DayFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const DayFindManyApi = async <T extends Prisma.DayFindManyArgs>(
    request: NextRequest,
): RouteResponse<DayFindManyResponse<T>> => {
    try {
        const params: DayFindManyProps<T> = parseAndDecodeParams(request);
        const response: DayFindManyResponse<T> = await DayFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const DayCountApi = async <T extends Prisma.DayCountArgs>(
    request: NextRequest,
): RouteResponse<DayCountResponse<T>> => {
    try {
        const params: DayCountProps<T> = parseAndDecodeParams(request);
        const response: DayCountResponse<T> = await DayCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
