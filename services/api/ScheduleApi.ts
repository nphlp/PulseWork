import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    ScheduleCountCached,
    ScheduleFindFirstCached,
    ScheduleFindManyCached,
    ScheduleFindUniqueCached,
} from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # Schedule Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type ScheduleFindFirstProps<T extends Prisma.ScheduleFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.ScheduleFindFirstArgs
>;
type ScheduleFindFirstResponse<T extends Prisma.ScheduleFindFirstArgs> = GetResult<
    Prisma.$SchedulePayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type ScheduleFindUniqueProps<T extends Prisma.ScheduleFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.ScheduleFindUniqueArgs
>;
type ScheduleFindUniqueResponse<T extends Prisma.ScheduleFindUniqueArgs> = GetResult<
    Prisma.$SchedulePayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type ScheduleFindManyProps<T extends Prisma.ScheduleFindManyArgs> = Prisma.SelectSubset<T, Prisma.ScheduleFindManyArgs>;
type ScheduleFindManyResponse<T extends Prisma.ScheduleFindManyArgs> = GetResult<
    Prisma.$SchedulePayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type ScheduleCountProps<T extends Prisma.ScheduleCountArgs> = Prisma.SelectSubset<T, Prisma.ScheduleCountArgs>;
type ScheduleCountResponse<T extends Prisma.ScheduleCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ScheduleCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type ScheduleRoutes<Input> = {
    "/internal/schedule/findFirst": <T extends Prisma.ScheduleFindFirstArgs>() => {
        params: ScheduleFindFirstProps<T>;
        response: ScheduleFindFirstResponse<Input extends ScheduleFindFirstProps<T> ? Input : never>;
    };
    "/internal/schedule/findUnique": <T extends Prisma.ScheduleFindUniqueArgs>() => {
        params: ScheduleFindUniqueProps<T>;
        response: ScheduleFindUniqueResponse<Input extends ScheduleFindUniqueProps<T> ? Input : never>;
    };
    "/internal/schedule/findMany": <T extends Prisma.ScheduleFindManyArgs>() => {
        params: ScheduleFindManyProps<T>;
        response: ScheduleFindManyResponse<Input extends ScheduleFindManyProps<T> ? Input : never>;
    };
    "/internal/schedule/count": <T extends Prisma.ScheduleCountArgs>() => {
        params: ScheduleCountProps<T>;
        response: ScheduleCountResponse<Input extends ScheduleCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const ScheduleFindFirstApi = async <T extends Prisma.ScheduleFindFirstArgs>(
    request: NextRequest,
): RouteResponse<ScheduleFindFirstResponse<T>> => {
    try {
        const params: ScheduleFindFirstProps<T> = parseAndDecodeParams(request);
        const response: ScheduleFindFirstResponse<T> = await ScheduleFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const ScheduleFindUniqueApi = async <T extends Prisma.ScheduleFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<ScheduleFindUniqueResponse<T>> => {
    try {
        const params: ScheduleFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: ScheduleFindUniqueResponse<T> = await ScheduleFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const ScheduleFindManyApi = async <T extends Prisma.ScheduleFindManyArgs>(
    request: NextRequest,
): RouteResponse<ScheduleFindManyResponse<T>> => {
    try {
        const params: ScheduleFindManyProps<T> = parseAndDecodeParams(request);
        const response: ScheduleFindManyResponse<T> = await ScheduleFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const ScheduleCountApi = async <T extends Prisma.ScheduleCountArgs>(
    request: NextRequest,
): RouteResponse<ScheduleCountResponse<T>> => {
    try {
        const params: ScheduleCountProps<T> = parseAndDecodeParams(request);
        const response: ScheduleCountResponse<T> = await ScheduleCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
