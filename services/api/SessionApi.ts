import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    SessionCountCached,
    SessionFindFirstCached,
    SessionFindManyCached,
    SessionFindUniqueCached,
} from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # Session Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type SessionFindFirstProps<T extends Prisma.SessionFindFirstArgs> = Prisma.SelectSubset<T, Prisma.SessionFindFirstArgs>;
type SessionFindFirstResponse<T extends Prisma.SessionFindFirstArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type SessionFindUniqueProps<T extends Prisma.SessionFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionFindUniqueArgs
>;
type SessionFindUniqueResponse<T extends Prisma.SessionFindUniqueArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type SessionFindManyProps<T extends Prisma.SessionFindManyArgs> = Prisma.SelectSubset<T, Prisma.SessionFindManyArgs>;
type SessionFindManyResponse<T extends Prisma.SessionFindManyArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type SessionCountProps<T extends Prisma.SessionCountArgs> = Prisma.SelectSubset<T, Prisma.SessionCountArgs>;
type SessionCountResponse<T extends Prisma.SessionCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.SessionCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type SessionRoutes<Input> = {
    "/internal/session/findFirst": <T extends Prisma.SessionFindFirstArgs>() => {
        params: SessionFindFirstProps<T>;
        response: SessionFindFirstResponse<Input extends SessionFindFirstProps<T> ? Input : never>;
    };
    "/internal/session/findUnique": <T extends Prisma.SessionFindUniqueArgs>() => {
        params: SessionFindUniqueProps<T>;
        response: SessionFindUniqueResponse<Input extends SessionFindUniqueProps<T> ? Input : never>;
    };
    "/internal/session/findMany": <T extends Prisma.SessionFindManyArgs>() => {
        params: SessionFindManyProps<T>;
        response: SessionFindManyResponse<Input extends SessionFindManyProps<T> ? Input : never>;
    };
    "/internal/session/count": <T extends Prisma.SessionCountArgs>() => {
        params: SessionCountProps<T>;
        response: SessionCountResponse<Input extends SessionCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const SessionFindFirstApi = async <T extends Prisma.SessionFindFirstArgs>(
    request: NextRequest,
): RouteResponse<SessionFindFirstResponse<T>> => {
    try {
        const params: SessionFindFirstProps<T> = parseAndDecodeParams(request);
        const response: SessionFindFirstResponse<T> = await SessionFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const SessionFindUniqueApi = async <T extends Prisma.SessionFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<SessionFindUniqueResponse<T>> => {
    try {
        const params: SessionFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: SessionFindUniqueResponse<T> = await SessionFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const SessionFindManyApi = async <T extends Prisma.SessionFindManyArgs>(
    request: NextRequest,
): RouteResponse<SessionFindManyResponse<T>> => {
    try {
        const params: SessionFindManyProps<T> = parseAndDecodeParams(request);
        const response: SessionFindManyResponse<T> = await SessionFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const SessionCountApi = async <T extends Prisma.SessionCountArgs>(
    request: NextRequest,
): RouteResponse<SessionCountResponse<T>> => {
    try {
        const params: SessionCountProps<T> = parseAndDecodeParams(request);
        const response: SessionCountResponse<T> = await SessionCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
