import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { TeamCountCached, TeamFindFirstCached, TeamFindManyCached, TeamFindUniqueCached } from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # Team Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type TeamFindFirstProps<T extends Prisma.TeamFindFirstArgs> = Prisma.SelectSubset<T, Prisma.TeamFindFirstArgs>;
type TeamFindFirstResponse<T extends Prisma.TeamFindFirstArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TeamFindUniqueProps<T extends Prisma.TeamFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.TeamFindUniqueArgs>;
type TeamFindUniqueResponse<T extends Prisma.TeamFindUniqueArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TeamFindManyProps<T extends Prisma.TeamFindManyArgs> = Prisma.SelectSubset<T, Prisma.TeamFindManyArgs>;
type TeamFindManyResponse<T extends Prisma.TeamFindManyArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TeamCountProps<T extends Prisma.TeamCountArgs> = Prisma.SelectSubset<T, Prisma.TeamCountArgs>;
type TeamCountResponse<T extends Prisma.TeamCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TeamCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type TeamRoutes<Input> = {
    "/internal/team/findFirst": <T extends Prisma.TeamFindFirstArgs>() => {
        params: TeamFindFirstProps<T>;
        response: TeamFindFirstResponse<Input extends TeamFindFirstProps<T> ? Input : never>;
    };
    "/internal/team/findUnique": <T extends Prisma.TeamFindUniqueArgs>() => {
        params: TeamFindUniqueProps<T>;
        response: TeamFindUniqueResponse<Input extends TeamFindUniqueProps<T> ? Input : never>;
    };
    "/internal/team/findMany": <T extends Prisma.TeamFindManyArgs>() => {
        params: TeamFindManyProps<T>;
        response: TeamFindManyResponse<Input extends TeamFindManyProps<T> ? Input : never>;
    };
    "/internal/team/count": <T extends Prisma.TeamCountArgs>() => {
        params: TeamCountProps<T>;
        response: TeamCountResponse<Input extends TeamCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const TeamFindFirstApi = async <T extends Prisma.TeamFindFirstArgs>(
    request: NextRequest,
): RouteResponse<TeamFindFirstResponse<T>> => {
    try {
        const params: TeamFindFirstProps<T> = parseAndDecodeParams(request);
        const response: TeamFindFirstResponse<T> = await TeamFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TeamFindUniqueApi = async <T extends Prisma.TeamFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<TeamFindUniqueResponse<T>> => {
    try {
        const params: TeamFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: TeamFindUniqueResponse<T> = await TeamFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TeamFindManyApi = async <T extends Prisma.TeamFindManyArgs>(
    request: NextRequest,
): RouteResponse<TeamFindManyResponse<T>> => {
    try {
        const params: TeamFindManyProps<T> = parseAndDecodeParams(request);
        const response: TeamFindManyResponse<T> = await TeamFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TeamCountApi = async <T extends Prisma.TeamCountArgs>(
    request: NextRequest,
): RouteResponse<TeamCountResponse<T>> => {
    try {
        const params: TeamCountProps<T> = parseAndDecodeParams(request);
        const response: TeamCountResponse<T> = await TeamCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
