import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    TeamMemberCountCached,
    TeamMemberFindFirstCached,
    TeamMemberFindManyCached,
    TeamMemberFindUniqueCached,
} from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # TeamMember Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type TeamMemberFindFirstProps<T extends Prisma.TeamMemberFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberFindFirstArgs
>;
type TeamMemberFindFirstResponse<T extends Prisma.TeamMemberFindFirstArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TeamMemberFindUniqueProps<T extends Prisma.TeamMemberFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberFindUniqueArgs
>;
type TeamMemberFindUniqueResponse<T extends Prisma.TeamMemberFindUniqueArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TeamMemberFindManyProps<T extends Prisma.TeamMemberFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberFindManyArgs
>;
type TeamMemberFindManyResponse<T extends Prisma.TeamMemberFindManyArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TeamMemberCountProps<T extends Prisma.TeamMemberCountArgs> = Prisma.SelectSubset<T, Prisma.TeamMemberCountArgs>;
type TeamMemberCountResponse<T extends Prisma.TeamMemberCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TeamMemberCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type TeamMemberRoutes<Input> = {
    "/internal/teamMember/findFirst": <T extends Prisma.TeamMemberFindFirstArgs>() => {
        params: TeamMemberFindFirstProps<T>;
        response: TeamMemberFindFirstResponse<Input extends TeamMemberFindFirstProps<T> ? Input : never>;
    };
    "/internal/teamMember/findUnique": <T extends Prisma.TeamMemberFindUniqueArgs>() => {
        params: TeamMemberFindUniqueProps<T>;
        response: TeamMemberFindUniqueResponse<Input extends TeamMemberFindUniqueProps<T> ? Input : never>;
    };
    "/internal/teamMember/findMany": <T extends Prisma.TeamMemberFindManyArgs>() => {
        params: TeamMemberFindManyProps<T>;
        response: TeamMemberFindManyResponse<Input extends TeamMemberFindManyProps<T> ? Input : never>;
    };
    "/internal/teamMember/count": <T extends Prisma.TeamMemberCountArgs>() => {
        params: TeamMemberCountProps<T>;
        response: TeamMemberCountResponse<Input extends TeamMemberCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const TeamMemberFindFirstApi = async <T extends Prisma.TeamMemberFindFirstArgs>(
    request: NextRequest,
): RouteResponse<TeamMemberFindFirstResponse<T>> => {
    try {
        const params: TeamMemberFindFirstProps<T> = parseAndDecodeParams(request);
        const response: TeamMemberFindFirstResponse<T> = await TeamMemberFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TeamMemberFindUniqueApi = async <T extends Prisma.TeamMemberFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<TeamMemberFindUniqueResponse<T>> => {
    try {
        const params: TeamMemberFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: TeamMemberFindUniqueResponse<T> = await TeamMemberFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TeamMemberFindManyApi = async <T extends Prisma.TeamMemberFindManyArgs>(
    request: NextRequest,
): RouteResponse<TeamMemberFindManyResponse<T>> => {
    try {
        const params: TeamMemberFindManyProps<T> = parseAndDecodeParams(request);
        const response: TeamMemberFindManyResponse<T> = await TeamMemberFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TeamMemberCountApi = async <T extends Prisma.TeamMemberCountArgs>(
    request: NextRequest,
): RouteResponse<TeamMemberCountResponse<T>> => {
    try {
        const params: TeamMemberCountProps<T> = parseAndDecodeParams(request);
        const response: TeamMemberCountResponse<T> = await TeamMemberCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
