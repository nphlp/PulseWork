import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    TeamMemberCountCached,
    TeamMemberFindFirstCached,
    TeamMemberFindManyCached,
    TeamMemberFindUniqueCached,
} from "@services/cached";

/**
 * # TeamMember Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type TeamMemberFindFirstProps<T extends Prisma.TeamMemberFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberFindFirstArgs
>;
type TeamMemberFindFirstResponse<T extends Prisma.TeamMemberFindFirstArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TeamMemberFindUniqueProps<T extends Prisma.TeamMemberFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberFindUniqueArgs
>;
type TeamMemberFindUniqueResponse<T extends Prisma.TeamMemberFindUniqueArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TeamMemberFindManyProps<T extends Prisma.TeamMemberFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamMemberFindManyArgs
>;
type TeamMemberFindManyResponse<T extends Prisma.TeamMemberFindManyArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TeamMemberCountProps<T extends Prisma.TeamMemberCountArgs> = Prisma.SelectSubset<T, Prisma.TeamMemberCountArgs>;
type TeamMemberCountResponse<T extends Prisma.TeamMemberCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TeamMemberCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## TeamMember Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TeamMemberFindFirstServer = async <T extends Prisma.TeamMemberFindFirstArgs>(
    params: TeamMemberFindFirstProps<T>,
): Promise<TeamMemberFindFirstResponse<T>> => {
    return await TeamMemberFindFirstCached(params);
};

/**
 * ## TeamMember Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TeamMemberFindUniqueServer = async <T extends Prisma.TeamMemberFindUniqueArgs>(
    params: TeamMemberFindUniqueProps<T>,
): Promise<TeamMemberFindUniqueResponse<T>> => {
    return await TeamMemberFindUniqueCached(params);
};

/**
 * ## TeamMember Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TeamMemberFindManyServer = async <T extends Prisma.TeamMemberFindManyArgs>(
    params: TeamMemberFindManyProps<T>,
): Promise<TeamMemberFindManyResponse<T>> => {
    return await TeamMemberFindManyCached(params);
};

/**
 * ## TeamMember Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TeamMemberCountServer = async <T extends Prisma.TeamMemberCountArgs>(
    params: TeamMemberCountProps<T>,
): Promise<TeamMemberCountResponse<T>> => {
    return await TeamMemberCountCached(params);
};
