import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    SessionCountCached,
    SessionFindFirstCached,
    SessionFindManyCached,
    SessionFindUniqueCached,
} from "@services/cached";

/**
 * # Session Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type SessionFindFirstProps<T extends Prisma.SessionFindFirstArgs> = Prisma.SelectSubset<T, Prisma.SessionFindFirstArgs>;
type SessionFindFirstResponse<T extends Prisma.SessionFindFirstArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type SessionFindUniqueProps<T extends Prisma.SessionFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionFindUniqueArgs
>;
type SessionFindUniqueResponse<T extends Prisma.SessionFindUniqueArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type SessionFindManyProps<T extends Prisma.SessionFindManyArgs> = Prisma.SelectSubset<T, Prisma.SessionFindManyArgs>;
type SessionFindManyResponse<T extends Prisma.SessionFindManyArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type SessionCountProps<T extends Prisma.SessionCountArgs> = Prisma.SelectSubset<T, Prisma.SessionCountArgs>;
type SessionCountResponse<T extends Prisma.SessionCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.SessionCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Session Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const SessionFindFirstServer = async <T extends Prisma.SessionFindFirstArgs>(
    params: SessionFindFirstProps<T>,
): Promise<SessionFindFirstResponse<T>> => {
    return await SessionFindFirstCached(params);
};

/**
 * ## Session Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const SessionFindUniqueServer = async <T extends Prisma.SessionFindUniqueArgs>(
    params: SessionFindUniqueProps<T>,
): Promise<SessionFindUniqueResponse<T>> => {
    return await SessionFindUniqueCached(params);
};

/**
 * ## Session Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const SessionFindManyServer = async <T extends Prisma.SessionFindManyArgs>(
    params: SessionFindManyProps<T>,
): Promise<SessionFindManyResponse<T>> => {
    return await SessionFindManyCached(params);
};

/**
 * ## Session Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const SessionCountServer = async <T extends Prisma.SessionCountArgs>(
    params: SessionCountProps<T>,
): Promise<SessionCountResponse<T>> => {
    return await SessionCountCached(params);
};
