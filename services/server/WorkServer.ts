import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { WorkCountCached, WorkFindFirstCached, WorkFindManyCached, WorkFindUniqueCached } from "@services/cached";

/**
 * # Work Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type WorkFindFirstProps<T extends Prisma.WorkFindFirstArgs> = Prisma.SelectSubset<T, Prisma.WorkFindFirstArgs>;
type WorkFindFirstResponse<T extends Prisma.WorkFindFirstArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type WorkFindUniqueProps<T extends Prisma.WorkFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.WorkFindUniqueArgs>;
type WorkFindUniqueResponse<T extends Prisma.WorkFindUniqueArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type WorkFindManyProps<T extends Prisma.WorkFindManyArgs> = Prisma.SelectSubset<T, Prisma.WorkFindManyArgs>;
type WorkFindManyResponse<T extends Prisma.WorkFindManyArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type WorkCountProps<T extends Prisma.WorkCountArgs> = Prisma.SelectSubset<T, Prisma.WorkCountArgs>;
type WorkCountResponse<T extends Prisma.WorkCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.WorkCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Work Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const WorkFindFirstServer = async <T extends Prisma.WorkFindFirstArgs>(
    params: WorkFindFirstProps<T>,
): Promise<WorkFindFirstResponse<T>> => {
    return await WorkFindFirstCached(params);
};

/**
 * ## Work Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const WorkFindUniqueServer = async <T extends Prisma.WorkFindUniqueArgs>(
    params: WorkFindUniqueProps<T>,
): Promise<WorkFindUniqueResponse<T>> => {
    return await WorkFindUniqueCached(params);
};

/**
 * ## Work Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const WorkFindManyServer = async <T extends Prisma.WorkFindManyArgs>(
    params: WorkFindManyProps<T>,
): Promise<WorkFindManyResponse<T>> => {
    return await WorkFindManyCached(params);
};

/**
 * ## Work Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const WorkCountServer = async <T extends Prisma.WorkCountArgs>(
    params: WorkCountProps<T>,
): Promise<WorkCountResponse<T>> => {
    return await WorkCountCached(params);
};
