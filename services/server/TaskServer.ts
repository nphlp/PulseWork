import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { TaskCountCached, TaskFindFirstCached, TaskFindManyCached, TaskFindUniqueCached } from "@services/cached";

/**
 * # Task Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type TaskFindFirstProps<T extends Prisma.TaskFindFirstArgs> = Prisma.SelectSubset<T, Prisma.TaskFindFirstArgs>;
type TaskFindFirstResponse<T extends Prisma.TaskFindFirstArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TaskFindUniqueProps<T extends Prisma.TaskFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.TaskFindUniqueArgs>;
type TaskFindUniqueResponse<T extends Prisma.TaskFindUniqueArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TaskFindManyProps<T extends Prisma.TaskFindManyArgs> = Prisma.SelectSubset<T, Prisma.TaskFindManyArgs>;
type TaskFindManyResponse<T extends Prisma.TaskFindManyArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TaskCountProps<T extends Prisma.TaskCountArgs> = Prisma.SelectSubset<T, Prisma.TaskCountArgs>;
type TaskCountResponse<T extends Prisma.TaskCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TaskCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Task Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TaskFindFirstServer = async <T extends Prisma.TaskFindFirstArgs>(
    params: TaskFindFirstProps<T>,
): Promise<TaskFindFirstResponse<T>> => {
    return await TaskFindFirstCached(params);
};

/**
 * ## Task Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TaskFindUniqueServer = async <T extends Prisma.TaskFindUniqueArgs>(
    params: TaskFindUniqueProps<T>,
): Promise<TaskFindUniqueResponse<T>> => {
    return await TaskFindUniqueCached(params);
};

/**
 * ## Task Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TaskFindManyServer = async <T extends Prisma.TaskFindManyArgs>(
    params: TaskFindManyProps<T>,
): Promise<TaskFindManyResponse<T>> => {
    return await TaskFindManyCached(params);
};

/**
 * ## Task Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TaskCountServer = async <T extends Prisma.TaskCountArgs>(
    params: TaskCountProps<T>,
): Promise<TaskCountResponse<T>> => {
    return await TaskCountCached(params);
};
