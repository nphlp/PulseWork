import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    ContractCountCached,
    ContractFindFirstCached,
    ContractFindManyCached,
    ContractFindUniqueCached,
} from "@services/cached";

/**
 * # Contract Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type ContractFindFirstProps<T extends Prisma.ContractFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractFindFirstArgs
>;
type ContractFindFirstResponse<T extends Prisma.ContractFindFirstArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type ContractFindUniqueProps<T extends Prisma.ContractFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractFindUniqueArgs
>;
type ContractFindUniqueResponse<T extends Prisma.ContractFindUniqueArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type ContractFindManyProps<T extends Prisma.ContractFindManyArgs> = Prisma.SelectSubset<T, Prisma.ContractFindManyArgs>;
type ContractFindManyResponse<T extends Prisma.ContractFindManyArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type ContractCountProps<T extends Prisma.ContractCountArgs> = Prisma.SelectSubset<T, Prisma.ContractCountArgs>;
type ContractCountResponse<T extends Prisma.ContractCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ContractCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Contract Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ContractFindFirstServer = async <T extends Prisma.ContractFindFirstArgs>(
    params: ContractFindFirstProps<T>,
): Promise<ContractFindFirstResponse<T>> => {
    return await ContractFindFirstCached(params);
};

/**
 * ## Contract Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ContractFindUniqueServer = async <T extends Prisma.ContractFindUniqueArgs>(
    params: ContractFindUniqueProps<T>,
): Promise<ContractFindUniqueResponse<T>> => {
    return await ContractFindUniqueCached(params);
};

/**
 * ## Contract Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ContractFindManyServer = async <T extends Prisma.ContractFindManyArgs>(
    params: ContractFindManyProps<T>,
): Promise<ContractFindManyResponse<T>> => {
    return await ContractFindManyCached(params);
};

/**
 * ## Contract Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ContractCountServer = async <T extends Prisma.ContractCountArgs>(
    params: ContractCountProps<T>,
): Promise<ContractCountResponse<T>> => {
    return await ContractCountCached(params);
};
