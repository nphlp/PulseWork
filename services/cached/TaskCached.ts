import TaskService from "@class/TaskClass";
import { Prisma } from "@prisma/client";
import {
    TaskCountProps,
    TaskCountResponse,
    TaskFindFirstProps,
    TaskFindFirstResponse,
    TaskFindManyProps,
    TaskFindManyResponse,
    TaskFindUniqueProps,
    TaskFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Task Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const TaskFindFirstCached = async <T extends Prisma.TaskFindFirstArgs>(
    params: TaskFindFirstProps<T>,
): Promise<TaskFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All task services
        "task",
        // All findFirst services
        "findFirst",
        // All task findFirst services
        "task-findFirst",
        // This specific services
        hashParamsForCacheKey("task-findFirst", params),
    );

    return await TaskService.findFirst(params);
};

export const TaskFindUniqueCached = async <T extends Prisma.TaskFindUniqueArgs>(
    params: TaskFindUniqueProps<T>,
): Promise<TaskFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All task services
        "task",
        // All findUnique services
        "findUnique",
        // All task findUnique services
        "task-findUnique",
        // This specific services
        hashParamsForCacheKey("task-findUnique", params),
    );

    return await TaskService.findUnique(params);
};

export const TaskFindManyCached = async <T extends Prisma.TaskFindManyArgs>(
    params: TaskFindManyProps<T>,
): Promise<TaskFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All task services
        "task",
        // All findMany services
        "findMany",
        // All task findMany services
        "task-findMany",
        // This specific services
        hashParamsForCacheKey("task-findMany", params),
    );

    return await TaskService.findMany(params);
};

export const TaskCountCached = async <T extends Prisma.TaskCountArgs>(
    params: TaskCountProps<T>,
): Promise<TaskCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All task services
        "task",
        // All count services
        "count",
        // All task count services
        "task-count",
        // This specific services
        hashParamsForCacheKey("task-count", params),
    );

    return await TaskService.count(params);
};
