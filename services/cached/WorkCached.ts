import WorkService from "@class/WorkClass";
import { Prisma } from "@prisma/client";
import {
    WorkCountProps,
    WorkCountResponse,
    WorkFindFirstProps,
    WorkFindFirstResponse,
    WorkFindManyProps,
    WorkFindManyResponse,
    WorkFindUniqueProps,
    WorkFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Work Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const WorkFindFirstCached = async <T extends Prisma.WorkFindFirstArgs>(
    params: WorkFindFirstProps<T>,
): Promise<WorkFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All work services
        "work",
        // All findFirst services
        "findFirst",
        // All work findFirst services
        "work-findFirst",
        // This specific services
        hashParamsForCacheKey("work-findFirst", params),
    );

    return await WorkService.findFirst(params);
};

export const WorkFindUniqueCached = async <T extends Prisma.WorkFindUniqueArgs>(
    params: WorkFindUniqueProps<T>,
): Promise<WorkFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All work services
        "work",
        // All findUnique services
        "findUnique",
        // All work findUnique services
        "work-findUnique",
        // This specific services
        hashParamsForCacheKey("work-findUnique", params),
    );

    return await WorkService.findUnique(params);
};

export const WorkFindManyCached = async <T extends Prisma.WorkFindManyArgs>(
    params: WorkFindManyProps<T>,
): Promise<WorkFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All work services
        "work",
        // All findMany services
        "findMany",
        // All work findMany services
        "work-findMany",
        // This specific services
        hashParamsForCacheKey("work-findMany", params),
    );

    return await WorkService.findMany(params);
};

export const WorkCountCached = async <T extends Prisma.WorkCountArgs>(
    params: WorkCountProps<T>,
): Promise<WorkCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All work services
        "work",
        // All count services
        "count",
        // All work count services
        "work-count",
        // This specific services
        hashParamsForCacheKey("work-count", params),
    );

    return await WorkService.count(params);
};
