import SessionService from "@class/SessionClass";
import { Prisma } from "@prisma/client";
import {
    SessionCountProps,
    SessionCountResponse,
    SessionFindFirstProps,
    SessionFindFirstResponse,
    SessionFindManyProps,
    SessionFindManyResponse,
    SessionFindUniqueProps,
    SessionFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Session Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const SessionFindFirstCached = async <T extends Prisma.SessionFindFirstArgs>(
    params: SessionFindFirstProps<T>,
): Promise<SessionFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All session services
        "session",
        // All findFirst services
        "findFirst",
        // All session findFirst services
        "session-findFirst",
        // This specific services
        hashParamsForCacheKey("session-findFirst", params),
    );

    return await SessionService.findFirst(params);
};

export const SessionFindUniqueCached = async <T extends Prisma.SessionFindUniqueArgs>(
    params: SessionFindUniqueProps<T>,
): Promise<SessionFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All session services
        "session",
        // All findUnique services
        "findUnique",
        // All session findUnique services
        "session-findUnique",
        // This specific services
        hashParamsForCacheKey("session-findUnique", params),
    );

    return await SessionService.findUnique(params);
};

export const SessionFindManyCached = async <T extends Prisma.SessionFindManyArgs>(
    params: SessionFindManyProps<T>,
): Promise<SessionFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All session services
        "session",
        // All findMany services
        "findMany",
        // All session findMany services
        "session-findMany",
        // This specific services
        hashParamsForCacheKey("session-findMany", params),
    );

    return await SessionService.findMany(params);
};

export const SessionCountCached = async <T extends Prisma.SessionCountArgs>(
    params: SessionCountProps<T>,
): Promise<SessionCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All session services
        "session",
        // All count services
        "count",
        // All session count services
        "session-count",
        // This specific services
        hashParamsForCacheKey("session-count", params),
    );

    return await SessionService.count(params);
};
