import LeaveService from "@class/LeaveClass";
import { Prisma } from "@prisma/client";
import {
    LeaveCountProps,
    LeaveCountResponse,
    LeaveFindFirstProps,
    LeaveFindFirstResponse,
    LeaveFindManyProps,
    LeaveFindManyResponse,
    LeaveFindUniqueProps,
    LeaveFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Leave Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const LeaveFindFirstCached = async <T extends Prisma.LeaveFindFirstArgs>(
    params: LeaveFindFirstProps<T>,
): Promise<LeaveFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All leave services
        "leave",
        // All findFirst services
        "findFirst",
        // All leave findFirst services
        "leave-findFirst",
        // This specific services
        hashParamsForCacheKey("leave-findFirst", params),
    );

    return await LeaveService.findFirst(params);
};

export const LeaveFindUniqueCached = async <T extends Prisma.LeaveFindUniqueArgs>(
    params: LeaveFindUniqueProps<T>,
): Promise<LeaveFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All leave services
        "leave",
        // All findUnique services
        "findUnique",
        // All leave findUnique services
        "leave-findUnique",
        // This specific services
        hashParamsForCacheKey("leave-findUnique", params),
    );

    return await LeaveService.findUnique(params);
};

export const LeaveFindManyCached = async <T extends Prisma.LeaveFindManyArgs>(
    params: LeaveFindManyProps<T>,
): Promise<LeaveFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All leave services
        "leave",
        // All findMany services
        "findMany",
        // All leave findMany services
        "leave-findMany",
        // This specific services
        hashParamsForCacheKey("leave-findMany", params),
    );

    return await LeaveService.findMany(params);
};

export const LeaveCountCached = async <T extends Prisma.LeaveCountArgs>(
    params: LeaveCountProps<T>,
): Promise<LeaveCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All leave services
        "leave",
        // All count services
        "count",
        // All leave count services
        "leave-count",
        // This specific services
        hashParamsForCacheKey("leave-count", params),
    );

    return await LeaveService.count(params);
};
