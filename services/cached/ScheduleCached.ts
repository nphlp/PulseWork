import ScheduleService from "@class/ScheduleClass";
import { Prisma } from "@prisma/client";
import {
    ScheduleCountProps,
    ScheduleCountResponse,
    ScheduleFindFirstProps,
    ScheduleFindFirstResponse,
    ScheduleFindManyProps,
    ScheduleFindManyResponse,
    ScheduleFindUniqueProps,
    ScheduleFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Schedule Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const ScheduleFindFirstCached = async <T extends Prisma.ScheduleFindFirstArgs>(
    params: ScheduleFindFirstProps<T>,
): Promise<ScheduleFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All schedule services
        "schedule",
        // All findFirst services
        "findFirst",
        // All schedule findFirst services
        "schedule-findFirst",
        // This specific services
        hashParamsForCacheKey("schedule-findFirst", params),
    );

    return await ScheduleService.findFirst(params);
};

export const ScheduleFindUniqueCached = async <T extends Prisma.ScheduleFindUniqueArgs>(
    params: ScheduleFindUniqueProps<T>,
): Promise<ScheduleFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All schedule services
        "schedule",
        // All findUnique services
        "findUnique",
        // All schedule findUnique services
        "schedule-findUnique",
        // This specific services
        hashParamsForCacheKey("schedule-findUnique", params),
    );

    return await ScheduleService.findUnique(params);
};

export const ScheduleFindManyCached = async <T extends Prisma.ScheduleFindManyArgs>(
    params: ScheduleFindManyProps<T>,
): Promise<ScheduleFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All schedule services
        "schedule",
        // All findMany services
        "findMany",
        // All schedule findMany services
        "schedule-findMany",
        // This specific services
        hashParamsForCacheKey("schedule-findMany", params),
    );

    return await ScheduleService.findMany(params);
};

export const ScheduleCountCached = async <T extends Prisma.ScheduleCountArgs>(
    params: ScheduleCountProps<T>,
): Promise<ScheduleCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All schedule services
        "schedule",
        // All count services
        "count",
        // All schedule count services
        "schedule-count",
        // This specific services
        hashParamsForCacheKey("schedule-count", params),
    );

    return await ScheduleService.count(params);
};
