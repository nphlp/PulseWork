import DayService from "@class/DayClass";
import { Prisma } from "@prisma/client";
import {
    DayCountProps,
    DayCountResponse,
    DayFindFirstProps,
    DayFindFirstResponse,
    DayFindManyProps,
    DayFindManyResponse,
    DayFindUniqueProps,
    DayFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Day Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const DayFindFirstCached = async <T extends Prisma.DayFindFirstArgs>(
    params: DayFindFirstProps<T>,
): Promise<DayFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All day services
        "day",
        // All findFirst services
        "findFirst",
        // All day findFirst services
        "day-findFirst",
        // This specific services
        hashParamsForCacheKey("day-findFirst", params),
    );

    return await DayService.findFirst(params);
};

export const DayFindUniqueCached = async <T extends Prisma.DayFindUniqueArgs>(
    params: DayFindUniqueProps<T>,
): Promise<DayFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All day services
        "day",
        // All findUnique services
        "findUnique",
        // All day findUnique services
        "day-findUnique",
        // This specific services
        hashParamsForCacheKey("day-findUnique", params),
    );

    return await DayService.findUnique(params);
};

export const DayFindManyCached = async <T extends Prisma.DayFindManyArgs>(
    params: DayFindManyProps<T>,
): Promise<DayFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All day services
        "day",
        // All findMany services
        "findMany",
        // All day findMany services
        "day-findMany",
        // This specific services
        hashParamsForCacheKey("day-findMany", params),
    );

    return await DayService.findMany(params);
};

export const DayCountCached = async <T extends Prisma.DayCountArgs>(
    params: DayCountProps<T>,
): Promise<DayCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All day services
        "day",
        // All count services
        "count",
        // All day count services
        "day-count",
        // This specific services
        hashParamsForCacheKey("day-count", params),
    );

    return await DayService.count(params);
};
