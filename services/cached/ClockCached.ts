import ClockService from "@class/ClockClass";
import { Prisma } from "@prisma/client";
import {
    ClockCountProps,
    ClockCountResponse,
    ClockFindFirstProps,
    ClockFindFirstResponse,
    ClockFindManyProps,
    ClockFindManyResponse,
    ClockFindUniqueProps,
    ClockFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Clock Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const ClockFindFirstCached = async <T extends Prisma.ClockFindFirstArgs>(
    params: ClockFindFirstProps<T>,
): Promise<ClockFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All clock services
        "clock",
        // All findFirst services
        "findFirst",
        // All clock findFirst services
        "clock-findFirst",
        // This specific services
        hashParamsForCacheKey("clock-findFirst", params),
    );

    return await ClockService.findFirst(params);
};

export const ClockFindUniqueCached = async <T extends Prisma.ClockFindUniqueArgs>(
    params: ClockFindUniqueProps<T>,
): Promise<ClockFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All clock services
        "clock",
        // All findUnique services
        "findUnique",
        // All clock findUnique services
        "clock-findUnique",
        // This specific services
        hashParamsForCacheKey("clock-findUnique", params),
    );

    return await ClockService.findUnique(params);
};

export const ClockFindManyCached = async <T extends Prisma.ClockFindManyArgs>(
    params: ClockFindManyProps<T>,
): Promise<ClockFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All clock services
        "clock",
        // All findMany services
        "findMany",
        // All clock findMany services
        "clock-findMany",
        // This specific services
        hashParamsForCacheKey("clock-findMany", params),
    );

    return await ClockService.findMany(params);
};

export const ClockCountCached = async <T extends Prisma.ClockCountArgs>(
    params: ClockCountProps<T>,
): Promise<ClockCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All clock services
        "clock",
        // All count services
        "count",
        // All clock count services
        "clock-count",
        // This specific services
        hashParamsForCacheKey("clock-count", params),
    );

    return await ClockService.count(params);
};
