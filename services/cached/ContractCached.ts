import ContractService from "@class/ContractClass";
import { Prisma } from "@prisma/client";
import {
    ContractCountProps,
    ContractCountResponse,
    ContractFindFirstProps,
    ContractFindFirstResponse,
    ContractFindManyProps,
    ContractFindManyResponse,
    ContractFindUniqueProps,
    ContractFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Contract Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const ContractFindFirstCached = async <T extends Prisma.ContractFindFirstArgs>(
    params: ContractFindFirstProps<T>,
): Promise<ContractFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All contract services
        "contract",
        // All findFirst services
        "findFirst",
        // All contract findFirst services
        "contract-findFirst",
        // This specific services
        hashParamsForCacheKey("contract-findFirst", params),
    );

    return await ContractService.findFirst(params);
};

export const ContractFindUniqueCached = async <T extends Prisma.ContractFindUniqueArgs>(
    params: ContractFindUniqueProps<T>,
): Promise<ContractFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All contract services
        "contract",
        // All findUnique services
        "findUnique",
        // All contract findUnique services
        "contract-findUnique",
        // This specific services
        hashParamsForCacheKey("contract-findUnique", params),
    );

    return await ContractService.findUnique(params);
};

export const ContractFindManyCached = async <T extends Prisma.ContractFindManyArgs>(
    params: ContractFindManyProps<T>,
): Promise<ContractFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All contract services
        "contract",
        // All findMany services
        "findMany",
        // All contract findMany services
        "contract-findMany",
        // This specific services
        hashParamsForCacheKey("contract-findMany", params),
    );

    return await ContractService.findMany(params);
};

export const ContractCountCached = async <T extends Prisma.ContractCountArgs>(
    params: ContractCountProps<T>,
): Promise<ContractCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All contract services
        "contract",
        // All count services
        "count",
        // All contract count services
        "contract-count",
        // This specific services
        hashParamsForCacheKey("contract-count", params),
    );

    return await ContractService.count(params);
};
