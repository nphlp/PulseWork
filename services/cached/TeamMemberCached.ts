import TeamMemberService from "@class/TeamMemberClass";
import { Prisma } from "@prisma/client";
import {
    TeamMemberCountProps,
    TeamMemberCountResponse,
    TeamMemberFindFirstProps,
    TeamMemberFindFirstResponse,
    TeamMemberFindManyProps,
    TeamMemberFindManyResponse,
    TeamMemberFindUniqueProps,
    TeamMemberFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # TeamMember Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const TeamMemberFindFirstCached = async <T extends Prisma.TeamMemberFindFirstArgs>(
    params: TeamMemberFindFirstProps<T>,
): Promise<TeamMemberFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All teamMember services
        "teamMember",
        // All findFirst services
        "findFirst",
        // All teamMember findFirst services
        "teamMember-findFirst",
        // This specific services
        hashParamsForCacheKey("teamMember-findFirst", params),
    );

    return await TeamMemberService.findFirst(params);
};

export const TeamMemberFindUniqueCached = async <T extends Prisma.TeamMemberFindUniqueArgs>(
    params: TeamMemberFindUniqueProps<T>,
): Promise<TeamMemberFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All teamMember services
        "teamMember",
        // All findUnique services
        "findUnique",
        // All teamMember findUnique services
        "teamMember-findUnique",
        // This specific services
        hashParamsForCacheKey("teamMember-findUnique", params),
    );

    return await TeamMemberService.findUnique(params);
};

export const TeamMemberFindManyCached = async <T extends Prisma.TeamMemberFindManyArgs>(
    params: TeamMemberFindManyProps<T>,
): Promise<TeamMemberFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All teamMember services
        "teamMember",
        // All findMany services
        "findMany",
        // All teamMember findMany services
        "teamMember-findMany",
        // This specific services
        hashParamsForCacheKey("teamMember-findMany", params),
    );

    return await TeamMemberService.findMany(params);
};

export const TeamMemberCountCached = async <T extends Prisma.TeamMemberCountArgs>(
    params: TeamMemberCountProps<T>,
): Promise<TeamMemberCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All teamMember services
        "teamMember",
        // All count services
        "count",
        // All teamMember count services
        "teamMember-count",
        // This specific services
        hashParamsForCacheKey("teamMember-count", params),
    );

    return await TeamMemberService.count(params);
};
