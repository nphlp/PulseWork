import TeamService from "@class/TeamClass";
import { Prisma } from "@prisma/client";
import {
    TeamCountProps,
    TeamCountResponse,
    TeamFindFirstProps,
    TeamFindFirstResponse,
    TeamFindManyProps,
    TeamFindManyResponse,
    TeamFindUniqueProps,
    TeamFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Team Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const TeamFindFirstCached = async <T extends Prisma.TeamFindFirstArgs>(
    params: TeamFindFirstProps<T>,
): Promise<TeamFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All team services
        "team",
        // All findFirst services
        "findFirst",
        // All team findFirst services
        "team-findFirst",
        // This specific services
        hashParamsForCacheKey("team-findFirst", params),
    );

    return await TeamService.findFirst(params);
};

export const TeamFindUniqueCached = async <T extends Prisma.TeamFindUniqueArgs>(
    params: TeamFindUniqueProps<T>,
): Promise<TeamFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All team services
        "team",
        // All findUnique services
        "findUnique",
        // All team findUnique services
        "team-findUnique",
        // This specific services
        hashParamsForCacheKey("team-findUnique", params),
    );

    return await TeamService.findUnique(params);
};

export const TeamFindManyCached = async <T extends Prisma.TeamFindManyArgs>(
    params: TeamFindManyProps<T>,
): Promise<TeamFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All team services
        "team",
        // All findMany services
        "findMany",
        // All team findMany services
        "team-findMany",
        // This specific services
        hashParamsForCacheKey("team-findMany", params),
    );

    return await TeamService.findMany(params);
};

export const TeamCountCached = async <T extends Prisma.TeamCountArgs>(
    params: TeamCountProps<T>,
): Promise<TeamCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All team services
        "team",
        // All count services
        "count",
        // All team count services
        "team-count",
        // This specific services
        hashParamsForCacheKey("team-count", params),
    );

    return await TeamService.count(params);
};
