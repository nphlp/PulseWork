import AccountService from "@class/AccountClass";
import { Prisma } from "@prisma/client";
import {
    AccountCountProps,
    AccountCountResponse,
    AccountFindFirstProps,
    AccountFindFirstResponse,
    AccountFindManyProps,
    AccountFindManyResponse,
    AccountFindUniqueProps,
    AccountFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Account Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const AccountFindFirstCached = async <T extends Prisma.AccountFindFirstArgs>(
    params: AccountFindFirstProps<T>,
): Promise<AccountFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All account services
        "account",
        // All findFirst services
        "findFirst",
        // All account findFirst services
        "account-findFirst",
        // This specific services
        hashParamsForCacheKey("account-findFirst", params),
    );

    return await AccountService.findFirst(params);
};

export const AccountFindUniqueCached = async <T extends Prisma.AccountFindUniqueArgs>(
    params: AccountFindUniqueProps<T>,
): Promise<AccountFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All account services
        "account",
        // All findUnique services
        "findUnique",
        // All account findUnique services
        "account-findUnique",
        // This specific services
        hashParamsForCacheKey("account-findUnique", params),
    );

    return await AccountService.findUnique(params);
};

export const AccountFindManyCached = async <T extends Prisma.AccountFindManyArgs>(
    params: AccountFindManyProps<T>,
): Promise<AccountFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All account services
        "account",
        // All findMany services
        "findMany",
        // All account findMany services
        "account-findMany",
        // This specific services
        hashParamsForCacheKey("account-findMany", params),
    );

    return await AccountService.findMany(params);
};

export const AccountCountCached = async <T extends Prisma.AccountCountArgs>(
    params: AccountCountProps<T>,
): Promise<AccountCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All account services
        "account",
        // All count services
        "count",
        // All account count services
        "account-count",
        // This specific services
        hashParamsForCacheKey("account-count", params),
    );

    return await AccountService.count(params);
};
