import VerificationService from "@class/VerificationClass";
import { Prisma } from "@prisma/client";
import {
    VerificationCountProps,
    VerificationCountResponse,
    VerificationFindFirstProps,
    VerificationFindFirstResponse,
    VerificationFindManyProps,
    VerificationFindManyResponse,
    VerificationFindUniqueProps,
    VerificationFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Verification Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const VerificationFindFirstCached = async <T extends Prisma.VerificationFindFirstArgs>(
    params: VerificationFindFirstProps<T>,
): Promise<VerificationFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All verification services
        "verification",
        // All findFirst services
        "findFirst",
        // All verification findFirst services
        "verification-findFirst",
        // This specific services
        hashParamsForCacheKey("verification-findFirst", params),
    );

    return await VerificationService.findFirst(params);
};

export const VerificationFindUniqueCached = async <T extends Prisma.VerificationFindUniqueArgs>(
    params: VerificationFindUniqueProps<T>,
): Promise<VerificationFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All verification services
        "verification",
        // All findUnique services
        "findUnique",
        // All verification findUnique services
        "verification-findUnique",
        // This specific services
        hashParamsForCacheKey("verification-findUnique", params),
    );

    return await VerificationService.findUnique(params);
};

export const VerificationFindManyCached = async <T extends Prisma.VerificationFindManyArgs>(
    params: VerificationFindManyProps<T>,
): Promise<VerificationFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All verification services
        "verification",
        // All findMany services
        "findMany",
        // All verification findMany services
        "verification-findMany",
        // This specific services
        hashParamsForCacheKey("verification-findMany", params),
    );

    return await VerificationService.findMany(params);
};

export const VerificationCountCached = async <T extends Prisma.VerificationCountArgs>(
    params: VerificationCountProps<T>,
): Promise<VerificationCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All verification services
        "verification",
        // All count services
        "count",
        // All verification count services
        "verification-count",
        // This specific services
        hashParamsForCacheKey("verification-count", params),
    );

    return await VerificationService.count(params);
};
