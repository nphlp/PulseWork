import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Leave Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$LeavePayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Leave native fields only
 */
export type LeaveModel = Flatten<Payload["scalars"]>;

/**
 * Leave relations fields only
 */
export type LeaveRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Leave native and relations fields
 */
export type LeaveComplete = Flatten<LeaveModel & LeaveRelations>;

/**
 * Leave count type
 */
export type LeaveCount = number;

// ========== Types ========== //

/**
 * Leave Create props
 */
export type LeaveCreateProps<T extends Prisma.LeaveCreateArgs = Prisma.LeaveCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.LeaveCreateArgs
>;

/**
 * Leave Create response
 */
export type LeaveCreateResponse<T extends Prisma.LeaveCreateArgs = Prisma.LeaveCreateArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Leave Upsert props
 */
export type LeaveUpsertProps<T extends Prisma.LeaveUpsertArgs = Prisma.LeaveUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.LeaveUpsertArgs
>;

/**
 * Leave Upsert response
 */
export type LeaveUpsertResponse<T extends Prisma.LeaveUpsertArgs = Prisma.LeaveUpsertArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Leave Update props
 */
export type LeaveUpdateProps<T extends Prisma.LeaveUpdateArgs = Prisma.LeaveUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.LeaveUpdateArgs
>;

/**
 * Leave Update response
 */
export type LeaveUpdateResponse<T extends Prisma.LeaveUpdateArgs = Prisma.LeaveUpdateArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Leave Delete props
 */
export type LeaveDeleteProps<T extends Prisma.LeaveDeleteArgs = Prisma.LeaveDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.LeaveDeleteArgs
>;

/**
 * Leave Delete response
 */
export type LeaveDeleteResponse<T extends Prisma.LeaveDeleteArgs = Prisma.LeaveDeleteArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Leave Create Many props
 */
export type LeaveCreateManyProps<T extends Prisma.LeaveCreateManyArgs = Prisma.LeaveCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.LeaveCreateManyArgs>;

/**
 * Leave Create Many response
 */
export type LeaveCreateManyResponse = Prisma.BatchPayload;

/**
 * Leave Update Many props
 */
export type LeaveUpdateManyProps<T extends Prisma.LeaveUpdateManyArgs = Prisma.LeaveUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.LeaveUpdateManyArgs>;

/**
 * Leave Update Many response
 */
export type LeaveUpdateManyResponse = Prisma.BatchPayload;

/**
 * Leave Delete Many props
 */
export type LeaveDeleteManyProps<T extends Prisma.LeaveDeleteManyArgs = Prisma.LeaveDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.LeaveDeleteManyArgs>;

/**
 * Leave Delete Many response
 */
export type LeaveDeleteManyResponse = Prisma.BatchPayload;

/**
 * Leave Find First props
 */
export type LeaveFindFirstProps<T extends Prisma.LeaveFindFirstArgs = Prisma.LeaveFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.LeaveFindFirstArgs
>;

/**
 * Leave Find First response
 */
export type LeaveFindFirstResponse<T extends Prisma.LeaveFindFirstArgs = Prisma.LeaveFindFirstArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Leave Find Unique props
 */
export type LeaveFindUniqueProps<T extends Prisma.LeaveFindUniqueArgs = Prisma.LeaveFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.LeaveFindUniqueArgs>;

/**
 * Leave Find Unique response
 */
export type LeaveFindUniqueResponse<T extends Prisma.LeaveFindUniqueArgs = Prisma.LeaveFindUniqueArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

/**
 * Leave Find Many props
 */
export type LeaveFindManyProps<T extends Prisma.LeaveFindManyArgs = Prisma.LeaveFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.LeaveFindManyArgs
>;

/**
 * Leave Find Many response
 */
export type LeaveFindManyResponse<T extends Prisma.LeaveFindManyArgs = Prisma.LeaveFindManyArgs> = GetResult<
    Prisma.$LeavePayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Leave Count props
 */
export type LeaveCountProps<T extends Prisma.LeaveCountArgs = Prisma.LeaveCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.LeaveCountArgs
>;

/**
 * Leave Count response
 */
export type LeaveCountResponse<T extends Prisma.LeaveCountArgs = Prisma.LeaveCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.LeaveCountAggregateOutputType>
        : number;
