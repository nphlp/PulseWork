import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Work Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$WorkPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Work native fields only
 */
export type WorkModel = Flatten<Payload["scalars"]>;

/**
 * Work relations fields only
 */
export type WorkRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Work native and relations fields
 */
export type WorkComplete = Flatten<WorkModel & WorkRelations>;

/**
 * Work count type
 */
export type WorkCount = number;

// ========== Types ========== //

/**
 * Work Create props
 */
export type WorkCreateProps<T extends Prisma.WorkCreateArgs = Prisma.WorkCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkCreateArgs
>;

/**
 * Work Create response
 */
export type WorkCreateResponse<T extends Prisma.WorkCreateArgs = Prisma.WorkCreateArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Work Upsert props
 */
export type WorkUpsertProps<T extends Prisma.WorkUpsertArgs = Prisma.WorkUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkUpsertArgs
>;

/**
 * Work Upsert response
 */
export type WorkUpsertResponse<T extends Prisma.WorkUpsertArgs = Prisma.WorkUpsertArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Work Update props
 */
export type WorkUpdateProps<T extends Prisma.WorkUpdateArgs = Prisma.WorkUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkUpdateArgs
>;

/**
 * Work Update response
 */
export type WorkUpdateResponse<T extends Prisma.WorkUpdateArgs = Prisma.WorkUpdateArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Work Delete props
 */
export type WorkDeleteProps<T extends Prisma.WorkDeleteArgs = Prisma.WorkDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkDeleteArgs
>;

/**
 * Work Delete response
 */
export type WorkDeleteResponse<T extends Prisma.WorkDeleteArgs = Prisma.WorkDeleteArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Work Create Many props
 */
export type WorkCreateManyProps<T extends Prisma.WorkCreateManyArgs = Prisma.WorkCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkCreateManyArgs
>;

/**
 * Work Create Many response
 */
export type WorkCreateManyResponse = Prisma.BatchPayload;

/**
 * Work Update Many props
 */
export type WorkUpdateManyProps<T extends Prisma.WorkUpdateManyArgs = Prisma.WorkUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkUpdateManyArgs
>;

/**
 * Work Update Many response
 */
export type WorkUpdateManyResponse = Prisma.BatchPayload;

/**
 * Work Delete Many props
 */
export type WorkDeleteManyProps<T extends Prisma.WorkDeleteManyArgs = Prisma.WorkDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkDeleteManyArgs
>;

/**
 * Work Delete Many response
 */
export type WorkDeleteManyResponse = Prisma.BatchPayload;

/**
 * Work Find First props
 */
export type WorkFindFirstProps<T extends Prisma.WorkFindFirstArgs = Prisma.WorkFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkFindFirstArgs
>;

/**
 * Work Find First response
 */
export type WorkFindFirstResponse<T extends Prisma.WorkFindFirstArgs = Prisma.WorkFindFirstArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Work Find Unique props
 */
export type WorkFindUniqueProps<T extends Prisma.WorkFindUniqueArgs = Prisma.WorkFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkFindUniqueArgs
>;

/**
 * Work Find Unique response
 */
export type WorkFindUniqueResponse<T extends Prisma.WorkFindUniqueArgs = Prisma.WorkFindUniqueArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

/**
 * Work Find Many props
 */
export type WorkFindManyProps<T extends Prisma.WorkFindManyArgs = Prisma.WorkFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkFindManyArgs
>;

/**
 * Work Find Many response
 */
export type WorkFindManyResponse<T extends Prisma.WorkFindManyArgs = Prisma.WorkFindManyArgs> = GetResult<
    Prisma.$WorkPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Work Count props
 */
export type WorkCountProps<T extends Prisma.WorkCountArgs = Prisma.WorkCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkCountArgs
>;

/**
 * Work Count response
 */
export type WorkCountResponse<T extends Prisma.WorkCountArgs = Prisma.WorkCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.WorkCountAggregateOutputType>
        : number;
