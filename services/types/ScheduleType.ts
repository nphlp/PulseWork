import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Schedule Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$SchedulePayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Schedule native fields only
 */
export type ScheduleModel = Flatten<Payload["scalars"]>;

/**
 * Schedule relations fields only
 */
export type ScheduleRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Schedule native and relations fields
 */
export type ScheduleComplete = Flatten<ScheduleModel & ScheduleRelations>;

/**
 * Schedule count type
 */
export type ScheduleCount = number;

// ========== Types ========== //

/**
 * Schedule Create props
 */
export type ScheduleCreateProps<T extends Prisma.ScheduleCreateArgs = Prisma.ScheduleCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.ScheduleCreateArgs
>;

/**
 * Schedule Create response
 */
export type ScheduleCreateResponse<T extends Prisma.ScheduleCreateArgs = Prisma.ScheduleCreateArgs> = GetResult<
    Prisma.$SchedulePayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Schedule Upsert props
 */
export type ScheduleUpsertProps<T extends Prisma.ScheduleUpsertArgs = Prisma.ScheduleUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.ScheduleUpsertArgs
>;

/**
 * Schedule Upsert response
 */
export type ScheduleUpsertResponse<T extends Prisma.ScheduleUpsertArgs = Prisma.ScheduleUpsertArgs> = GetResult<
    Prisma.$SchedulePayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Schedule Update props
 */
export type ScheduleUpdateProps<T extends Prisma.ScheduleUpdateArgs = Prisma.ScheduleUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.ScheduleUpdateArgs
>;

/**
 * Schedule Update response
 */
export type ScheduleUpdateResponse<T extends Prisma.ScheduleUpdateArgs = Prisma.ScheduleUpdateArgs> = GetResult<
    Prisma.$SchedulePayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Schedule Delete props
 */
export type ScheduleDeleteProps<T extends Prisma.ScheduleDeleteArgs = Prisma.ScheduleDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.ScheduleDeleteArgs
>;

/**
 * Schedule Delete response
 */
export type ScheduleDeleteResponse<T extends Prisma.ScheduleDeleteArgs = Prisma.ScheduleDeleteArgs> = GetResult<
    Prisma.$SchedulePayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Schedule Create Many props
 */
export type ScheduleCreateManyProps<T extends Prisma.ScheduleCreateManyArgs = Prisma.ScheduleCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.ScheduleCreateManyArgs>;

/**
 * Schedule Create Many response
 */
export type ScheduleCreateManyResponse = Prisma.BatchPayload;

/**
 * Schedule Update Many props
 */
export type ScheduleUpdateManyProps<T extends Prisma.ScheduleUpdateManyArgs = Prisma.ScheduleUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.ScheduleUpdateManyArgs>;

/**
 * Schedule Update Many response
 */
export type ScheduleUpdateManyResponse = Prisma.BatchPayload;

/**
 * Schedule Delete Many props
 */
export type ScheduleDeleteManyProps<T extends Prisma.ScheduleDeleteManyArgs = Prisma.ScheduleDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.ScheduleDeleteManyArgs>;

/**
 * Schedule Delete Many response
 */
export type ScheduleDeleteManyResponse = Prisma.BatchPayload;

/**
 * Schedule Find First props
 */
export type ScheduleFindFirstProps<T extends Prisma.ScheduleFindFirstArgs = Prisma.ScheduleFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.ScheduleFindFirstArgs>;

/**
 * Schedule Find First response
 */
export type ScheduleFindFirstResponse<T extends Prisma.ScheduleFindFirstArgs = Prisma.ScheduleFindFirstArgs> =
    GetResult<Prisma.$SchedulePayload<InternalArgs>, T, "findFirst", PrismaClientOptions>;

/**
 * Schedule Find Unique props
 */
export type ScheduleFindUniqueProps<T extends Prisma.ScheduleFindUniqueArgs = Prisma.ScheduleFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.ScheduleFindUniqueArgs>;

/**
 * Schedule Find Unique response
 */
export type ScheduleFindUniqueResponse<T extends Prisma.ScheduleFindUniqueArgs = Prisma.ScheduleFindUniqueArgs> =
    GetResult<Prisma.$SchedulePayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * Schedule Find Many props
 */
export type ScheduleFindManyProps<T extends Prisma.ScheduleFindManyArgs = Prisma.ScheduleFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.ScheduleFindManyArgs>;

/**
 * Schedule Find Many response
 */
export type ScheduleFindManyResponse<T extends Prisma.ScheduleFindManyArgs = Prisma.ScheduleFindManyArgs> = GetResult<
    Prisma.$SchedulePayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Schedule Count props
 */
export type ScheduleCountProps<T extends Prisma.ScheduleCountArgs = Prisma.ScheduleCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.ScheduleCountArgs
>;

/**
 * Schedule Count response
 */
export type ScheduleCountResponse<T extends Prisma.ScheduleCountArgs = Prisma.ScheduleCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ScheduleCountAggregateOutputType>
        : number;
