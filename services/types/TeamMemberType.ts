import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # TeamMember Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$TeamMemberPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * TeamMember native fields only
 */
export type TeamMemberModel = Flatten<Payload["scalars"]>;

/**
 * TeamMember relations fields only
 */
export type TeamMemberRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * TeamMember native and relations fields
 */
export type TeamMemberComplete = Flatten<TeamMemberModel & TeamMemberRelations>;

/**
 * TeamMember count type
 */
export type TeamMemberCount = number;

// ========== Types ========== //

/**
 * TeamMember Create props
 */
export type TeamMemberCreateProps<T extends Prisma.TeamMemberCreateArgs = Prisma.TeamMemberCreateArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberCreateArgs>;

/**
 * TeamMember Create response
 */
export type TeamMemberCreateResponse<T extends Prisma.TeamMemberCreateArgs = Prisma.TeamMemberCreateArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * TeamMember Upsert props
 */
export type TeamMemberUpsertProps<T extends Prisma.TeamMemberUpsertArgs = Prisma.TeamMemberUpsertArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberUpsertArgs>;

/**
 * TeamMember Upsert response
 */
export type TeamMemberUpsertResponse<T extends Prisma.TeamMemberUpsertArgs = Prisma.TeamMemberUpsertArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * TeamMember Update props
 */
export type TeamMemberUpdateProps<T extends Prisma.TeamMemberUpdateArgs = Prisma.TeamMemberUpdateArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberUpdateArgs>;

/**
 * TeamMember Update response
 */
export type TeamMemberUpdateResponse<T extends Prisma.TeamMemberUpdateArgs = Prisma.TeamMemberUpdateArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * TeamMember Delete props
 */
export type TeamMemberDeleteProps<T extends Prisma.TeamMemberDeleteArgs = Prisma.TeamMemberDeleteArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberDeleteArgs>;

/**
 * TeamMember Delete response
 */
export type TeamMemberDeleteResponse<T extends Prisma.TeamMemberDeleteArgs = Prisma.TeamMemberDeleteArgs> = GetResult<
    Prisma.$TeamMemberPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * TeamMember Create Many props
 */
export type TeamMemberCreateManyProps<T extends Prisma.TeamMemberCreateManyArgs = Prisma.TeamMemberCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberCreateManyArgs>;

/**
 * TeamMember Create Many response
 */
export type TeamMemberCreateManyResponse = Prisma.BatchPayload;

/**
 * TeamMember Update Many props
 */
export type TeamMemberUpdateManyProps<T extends Prisma.TeamMemberUpdateManyArgs = Prisma.TeamMemberUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberUpdateManyArgs>;

/**
 * TeamMember Update Many response
 */
export type TeamMemberUpdateManyResponse = Prisma.BatchPayload;

/**
 * TeamMember Delete Many props
 */
export type TeamMemberDeleteManyProps<T extends Prisma.TeamMemberDeleteManyArgs = Prisma.TeamMemberDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberDeleteManyArgs>;

/**
 * TeamMember Delete Many response
 */
export type TeamMemberDeleteManyResponse = Prisma.BatchPayload;

/**
 * TeamMember Find First props
 */
export type TeamMemberFindFirstProps<T extends Prisma.TeamMemberFindFirstArgs = Prisma.TeamMemberFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberFindFirstArgs>;

/**
 * TeamMember Find First response
 */
export type TeamMemberFindFirstResponse<T extends Prisma.TeamMemberFindFirstArgs = Prisma.TeamMemberFindFirstArgs> =
    GetResult<Prisma.$TeamMemberPayload<InternalArgs>, T, "findFirst", PrismaClientOptions>;

/**
 * TeamMember Find Unique props
 */
export type TeamMemberFindUniqueProps<T extends Prisma.TeamMemberFindUniqueArgs = Prisma.TeamMemberFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberFindUniqueArgs>;

/**
 * TeamMember Find Unique response
 */
export type TeamMemberFindUniqueResponse<T extends Prisma.TeamMemberFindUniqueArgs = Prisma.TeamMemberFindUniqueArgs> =
    GetResult<Prisma.$TeamMemberPayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * TeamMember Find Many props
 */
export type TeamMemberFindManyProps<T extends Prisma.TeamMemberFindManyArgs = Prisma.TeamMemberFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberFindManyArgs>;

/**
 * TeamMember Find Many response
 */
export type TeamMemberFindManyResponse<T extends Prisma.TeamMemberFindManyArgs = Prisma.TeamMemberFindManyArgs> =
    GetResult<Prisma.$TeamMemberPayload<InternalArgs>, T, "findMany", PrismaClientOptions>;

/**
 * TeamMember Count props
 */
export type TeamMemberCountProps<T extends Prisma.TeamMemberCountArgs = Prisma.TeamMemberCountArgs> =
    Prisma.SelectSubset<T, Prisma.TeamMemberCountArgs>;

/**
 * TeamMember Count response
 */
export type TeamMemberCountResponse<T extends Prisma.TeamMemberCountArgs = Prisma.TeamMemberCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TeamMemberCountAggregateOutputType>
        : number;
