import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Task Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$TaskPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Task native fields only
 */
export type TaskModel = Flatten<Payload["scalars"]>;

/**
 * Task relations fields only
 */
export type TaskRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Task native and relations fields
 */
export type TaskComplete = Flatten<TaskModel & TaskRelations>;

/**
 * Task count type
 */
export type TaskCount = number;

// ========== Types ========== //

/**
 * Task Create props
 */
export type TaskCreateProps<T extends Prisma.TaskCreateArgs = Prisma.TaskCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskCreateArgs
>;

/**
 * Task Create response
 */
export type TaskCreateResponse<T extends Prisma.TaskCreateArgs = Prisma.TaskCreateArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Task Upsert props
 */
export type TaskUpsertProps<T extends Prisma.TaskUpsertArgs = Prisma.TaskUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskUpsertArgs
>;

/**
 * Task Upsert response
 */
export type TaskUpsertResponse<T extends Prisma.TaskUpsertArgs = Prisma.TaskUpsertArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Task Update props
 */
export type TaskUpdateProps<T extends Prisma.TaskUpdateArgs = Prisma.TaskUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskUpdateArgs
>;

/**
 * Task Update response
 */
export type TaskUpdateResponse<T extends Prisma.TaskUpdateArgs = Prisma.TaskUpdateArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Task Delete props
 */
export type TaskDeleteProps<T extends Prisma.TaskDeleteArgs = Prisma.TaskDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskDeleteArgs
>;

/**
 * Task Delete response
 */
export type TaskDeleteResponse<T extends Prisma.TaskDeleteArgs = Prisma.TaskDeleteArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Task Create Many props
 */
export type TaskCreateManyProps<T extends Prisma.TaskCreateManyArgs = Prisma.TaskCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskCreateManyArgs
>;

/**
 * Task Create Many response
 */
export type TaskCreateManyResponse = Prisma.BatchPayload;

/**
 * Task Update Many props
 */
export type TaskUpdateManyProps<T extends Prisma.TaskUpdateManyArgs = Prisma.TaskUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskUpdateManyArgs
>;

/**
 * Task Update Many response
 */
export type TaskUpdateManyResponse = Prisma.BatchPayload;

/**
 * Task Delete Many props
 */
export type TaskDeleteManyProps<T extends Prisma.TaskDeleteManyArgs = Prisma.TaskDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskDeleteManyArgs
>;

/**
 * Task Delete Many response
 */
export type TaskDeleteManyResponse = Prisma.BatchPayload;

/**
 * Task Find First props
 */
export type TaskFindFirstProps<T extends Prisma.TaskFindFirstArgs = Prisma.TaskFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskFindFirstArgs
>;

/**
 * Task Find First response
 */
export type TaskFindFirstResponse<T extends Prisma.TaskFindFirstArgs = Prisma.TaskFindFirstArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Task Find Unique props
 */
export type TaskFindUniqueProps<T extends Prisma.TaskFindUniqueArgs = Prisma.TaskFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskFindUniqueArgs
>;

/**
 * Task Find Unique response
 */
export type TaskFindUniqueResponse<T extends Prisma.TaskFindUniqueArgs = Prisma.TaskFindUniqueArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

/**
 * Task Find Many props
 */
export type TaskFindManyProps<T extends Prisma.TaskFindManyArgs = Prisma.TaskFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskFindManyArgs
>;

/**
 * Task Find Many response
 */
export type TaskFindManyResponse<T extends Prisma.TaskFindManyArgs = Prisma.TaskFindManyArgs> = GetResult<
    Prisma.$TaskPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Task Count props
 */
export type TaskCountProps<T extends Prisma.TaskCountArgs = Prisma.TaskCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.TaskCountArgs
>;

/**
 * Task Count response
 */
export type TaskCountResponse<T extends Prisma.TaskCountArgs = Prisma.TaskCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TaskCountAggregateOutputType>
        : number;
