import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Session Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$SessionPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Session native fields only
 */
export type SessionModel = Flatten<Payload["scalars"]>;

/**
 * Session relations fields only
 */
export type SessionRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Session native and relations fields
 */
export type SessionComplete = Flatten<SessionModel & SessionRelations>;

/**
 * Session count type
 */
export type SessionCount = number;

// ========== Types ========== //

/**
 * Session Create props
 */
export type SessionCreateProps<T extends Prisma.SessionCreateArgs = Prisma.SessionCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionCreateArgs
>;

/**
 * Session Create response
 */
export type SessionCreateResponse<T extends Prisma.SessionCreateArgs = Prisma.SessionCreateArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Session Upsert props
 */
export type SessionUpsertProps<T extends Prisma.SessionUpsertArgs = Prisma.SessionUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionUpsertArgs
>;

/**
 * Session Upsert response
 */
export type SessionUpsertResponse<T extends Prisma.SessionUpsertArgs = Prisma.SessionUpsertArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Session Update props
 */
export type SessionUpdateProps<T extends Prisma.SessionUpdateArgs = Prisma.SessionUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionUpdateArgs
>;

/**
 * Session Update response
 */
export type SessionUpdateResponse<T extends Prisma.SessionUpdateArgs = Prisma.SessionUpdateArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Session Delete props
 */
export type SessionDeleteProps<T extends Prisma.SessionDeleteArgs = Prisma.SessionDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionDeleteArgs
>;

/**
 * Session Delete response
 */
export type SessionDeleteResponse<T extends Prisma.SessionDeleteArgs = Prisma.SessionDeleteArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Session Create Many props
 */
export type SessionCreateManyProps<T extends Prisma.SessionCreateManyArgs = Prisma.SessionCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.SessionCreateManyArgs>;

/**
 * Session Create Many response
 */
export type SessionCreateManyResponse = Prisma.BatchPayload;

/**
 * Session Update Many props
 */
export type SessionUpdateManyProps<T extends Prisma.SessionUpdateManyArgs = Prisma.SessionUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.SessionUpdateManyArgs>;

/**
 * Session Update Many response
 */
export type SessionUpdateManyResponse = Prisma.BatchPayload;

/**
 * Session Delete Many props
 */
export type SessionDeleteManyProps<T extends Prisma.SessionDeleteManyArgs = Prisma.SessionDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.SessionDeleteManyArgs>;

/**
 * Session Delete Many response
 */
export type SessionDeleteManyResponse = Prisma.BatchPayload;

/**
 * Session Find First props
 */
export type SessionFindFirstProps<T extends Prisma.SessionFindFirstArgs = Prisma.SessionFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.SessionFindFirstArgs>;

/**
 * Session Find First response
 */
export type SessionFindFirstResponse<T extends Prisma.SessionFindFirstArgs = Prisma.SessionFindFirstArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Session Find Unique props
 */
export type SessionFindUniqueProps<T extends Prisma.SessionFindUniqueArgs = Prisma.SessionFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.SessionFindUniqueArgs>;

/**
 * Session Find Unique response
 */
export type SessionFindUniqueResponse<T extends Prisma.SessionFindUniqueArgs = Prisma.SessionFindUniqueArgs> =
    GetResult<Prisma.$SessionPayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * Session Find Many props
 */
export type SessionFindManyProps<T extends Prisma.SessionFindManyArgs = Prisma.SessionFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.SessionFindManyArgs>;

/**
 * Session Find Many response
 */
export type SessionFindManyResponse<T extends Prisma.SessionFindManyArgs = Prisma.SessionFindManyArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Session Count props
 */
export type SessionCountProps<T extends Prisma.SessionCountArgs = Prisma.SessionCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionCountArgs
>;

/**
 * Session Count response
 */
export type SessionCountResponse<T extends Prisma.SessionCountArgs = Prisma.SessionCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.SessionCountAggregateOutputType>
        : number;
