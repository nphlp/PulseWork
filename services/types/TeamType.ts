import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Team Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$TeamPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Team native fields only
 */
export type TeamModel = Flatten<Payload["scalars"]>;

/**
 * Team relations fields only
 */
export type TeamRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Team native and relations fields
 */
export type TeamComplete = Flatten<TeamModel & TeamRelations>;

/**
 * Team count type
 */
export type TeamCount = number;

// ========== Types ========== //

/**
 * Team Create props
 */
export type TeamCreateProps<T extends Prisma.TeamCreateArgs = Prisma.TeamCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamCreateArgs
>;

/**
 * Team Create response
 */
export type TeamCreateResponse<T extends Prisma.TeamCreateArgs = Prisma.TeamCreateArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Team Upsert props
 */
export type TeamUpsertProps<T extends Prisma.TeamUpsertArgs = Prisma.TeamUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamUpsertArgs
>;

/**
 * Team Upsert response
 */
export type TeamUpsertResponse<T extends Prisma.TeamUpsertArgs = Prisma.TeamUpsertArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Team Update props
 */
export type TeamUpdateProps<T extends Prisma.TeamUpdateArgs = Prisma.TeamUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamUpdateArgs
>;

/**
 * Team Update response
 */
export type TeamUpdateResponse<T extends Prisma.TeamUpdateArgs = Prisma.TeamUpdateArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Team Delete props
 */
export type TeamDeleteProps<T extends Prisma.TeamDeleteArgs = Prisma.TeamDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamDeleteArgs
>;

/**
 * Team Delete response
 */
export type TeamDeleteResponse<T extends Prisma.TeamDeleteArgs = Prisma.TeamDeleteArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Team Create Many props
 */
export type TeamCreateManyProps<T extends Prisma.TeamCreateManyArgs = Prisma.TeamCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamCreateManyArgs
>;

/**
 * Team Create Many response
 */
export type TeamCreateManyResponse = Prisma.BatchPayload;

/**
 * Team Update Many props
 */
export type TeamUpdateManyProps<T extends Prisma.TeamUpdateManyArgs = Prisma.TeamUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamUpdateManyArgs
>;

/**
 * Team Update Many response
 */
export type TeamUpdateManyResponse = Prisma.BatchPayload;

/**
 * Team Delete Many props
 */
export type TeamDeleteManyProps<T extends Prisma.TeamDeleteManyArgs = Prisma.TeamDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamDeleteManyArgs
>;

/**
 * Team Delete Many response
 */
export type TeamDeleteManyResponse = Prisma.BatchPayload;

/**
 * Team Find First props
 */
export type TeamFindFirstProps<T extends Prisma.TeamFindFirstArgs = Prisma.TeamFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamFindFirstArgs
>;

/**
 * Team Find First response
 */
export type TeamFindFirstResponse<T extends Prisma.TeamFindFirstArgs = Prisma.TeamFindFirstArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Team Find Unique props
 */
export type TeamFindUniqueProps<T extends Prisma.TeamFindUniqueArgs = Prisma.TeamFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamFindUniqueArgs
>;

/**
 * Team Find Unique response
 */
export type TeamFindUniqueResponse<T extends Prisma.TeamFindUniqueArgs = Prisma.TeamFindUniqueArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

/**
 * Team Find Many props
 */
export type TeamFindManyProps<T extends Prisma.TeamFindManyArgs = Prisma.TeamFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamFindManyArgs
>;

/**
 * Team Find Many response
 */
export type TeamFindManyResponse<T extends Prisma.TeamFindManyArgs = Prisma.TeamFindManyArgs> = GetResult<
    Prisma.$TeamPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Team Count props
 */
export type TeamCountProps<T extends Prisma.TeamCountArgs = Prisma.TeamCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.TeamCountArgs
>;

/**
 * Team Count response
 */
export type TeamCountResponse<T extends Prisma.TeamCountArgs = Prisma.TeamCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TeamCountAggregateOutputType>
        : number;
