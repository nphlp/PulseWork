import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Contract Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$ContractPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Contract native fields only
 */
export type ContractModel = Flatten<Payload["scalars"]>;

/**
 * Contract relations fields only
 */
export type ContractRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Contract native and relations fields
 */
export type ContractComplete = Flatten<ContractModel & ContractRelations>;

/**
 * Contract count type
 */
export type ContractCount = number;

// ========== Types ========== //

/**
 * Contract Create props
 */
export type ContractCreateProps<T extends Prisma.ContractCreateArgs = Prisma.ContractCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractCreateArgs
>;

/**
 * Contract Create response
 */
export type ContractCreateResponse<T extends Prisma.ContractCreateArgs = Prisma.ContractCreateArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Contract Upsert props
 */
export type ContractUpsertProps<T extends Prisma.ContractUpsertArgs = Prisma.ContractUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractUpsertArgs
>;

/**
 * Contract Upsert response
 */
export type ContractUpsertResponse<T extends Prisma.ContractUpsertArgs = Prisma.ContractUpsertArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Contract Update props
 */
export type ContractUpdateProps<T extends Prisma.ContractUpdateArgs = Prisma.ContractUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractUpdateArgs
>;

/**
 * Contract Update response
 */
export type ContractUpdateResponse<T extends Prisma.ContractUpdateArgs = Prisma.ContractUpdateArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Contract Delete props
 */
export type ContractDeleteProps<T extends Prisma.ContractDeleteArgs = Prisma.ContractDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractDeleteArgs
>;

/**
 * Contract Delete response
 */
export type ContractDeleteResponse<T extends Prisma.ContractDeleteArgs = Prisma.ContractDeleteArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Contract Create Many props
 */
export type ContractCreateManyProps<T extends Prisma.ContractCreateManyArgs = Prisma.ContractCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.ContractCreateManyArgs>;

/**
 * Contract Create Many response
 */
export type ContractCreateManyResponse = Prisma.BatchPayload;

/**
 * Contract Update Many props
 */
export type ContractUpdateManyProps<T extends Prisma.ContractUpdateManyArgs = Prisma.ContractUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.ContractUpdateManyArgs>;

/**
 * Contract Update Many response
 */
export type ContractUpdateManyResponse = Prisma.BatchPayload;

/**
 * Contract Delete Many props
 */
export type ContractDeleteManyProps<T extends Prisma.ContractDeleteManyArgs = Prisma.ContractDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.ContractDeleteManyArgs>;

/**
 * Contract Delete Many response
 */
export type ContractDeleteManyResponse = Prisma.BatchPayload;

/**
 * Contract Find First props
 */
export type ContractFindFirstProps<T extends Prisma.ContractFindFirstArgs = Prisma.ContractFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.ContractFindFirstArgs>;

/**
 * Contract Find First response
 */
export type ContractFindFirstResponse<T extends Prisma.ContractFindFirstArgs = Prisma.ContractFindFirstArgs> =
    GetResult<Prisma.$ContractPayload<InternalArgs>, T, "findFirst", PrismaClientOptions>;

/**
 * Contract Find Unique props
 */
export type ContractFindUniqueProps<T extends Prisma.ContractFindUniqueArgs = Prisma.ContractFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.ContractFindUniqueArgs>;

/**
 * Contract Find Unique response
 */
export type ContractFindUniqueResponse<T extends Prisma.ContractFindUniqueArgs = Prisma.ContractFindUniqueArgs> =
    GetResult<Prisma.$ContractPayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * Contract Find Many props
 */
export type ContractFindManyProps<T extends Prisma.ContractFindManyArgs = Prisma.ContractFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.ContractFindManyArgs>;

/**
 * Contract Find Many response
 */
export type ContractFindManyResponse<T extends Prisma.ContractFindManyArgs = Prisma.ContractFindManyArgs> = GetResult<
    Prisma.$ContractPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Contract Count props
 */
export type ContractCountProps<T extends Prisma.ContractCountArgs = Prisma.ContractCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContractCountArgs
>;

/**
 * Contract Count response
 */
export type ContractCountResponse<T extends Prisma.ContractCountArgs = Prisma.ContractCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ContractCountAggregateOutputType>
        : number;
