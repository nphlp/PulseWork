import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # User Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$UserPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * User native fields only
 */
export type UserModel = Flatten<Payload["scalars"]>;

/**
 * User relations fields only
 */
export type UserRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * User native and relations fields
 */
export type UserComplete = Flatten<UserModel & UserRelations>;

/**
 * User count type
 */
export type UserCount = number;

// ========== Types ========== //

/**
 * User Create props
 */
export type UserCreateProps<T extends Prisma.UserCreateArgs = Prisma.UserCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserCreateArgs
>;

/**
 * User Create response
 */
export type UserCreateResponse<T extends Prisma.UserCreateArgs = Prisma.UserCreateArgs> = GetResult<
    Prisma.$UserPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * User Upsert props
 */
export type UserUpsertProps<T extends Prisma.UserUpsertArgs = Prisma.UserUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserUpsertArgs
>;

/**
 * User Upsert response
 */
export type UserUpsertResponse<T extends Prisma.UserUpsertArgs = Prisma.UserUpsertArgs> = GetResult<
    Prisma.$UserPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * User Update props
 */
export type UserUpdateProps<T extends Prisma.UserUpdateArgs = Prisma.UserUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserUpdateArgs
>;

/**
 * User Update response
 */
export type UserUpdateResponse<T extends Prisma.UserUpdateArgs = Prisma.UserUpdateArgs> = GetResult<
    Prisma.$UserPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * User Delete props
 */
export type UserDeleteProps<T extends Prisma.UserDeleteArgs = Prisma.UserDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserDeleteArgs
>;

/**
 * User Delete response
 */
export type UserDeleteResponse<T extends Prisma.UserDeleteArgs = Prisma.UserDeleteArgs> = GetResult<
    Prisma.$UserPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * User Create Many props
 */
export type UserCreateManyProps<T extends Prisma.UserCreateManyArgs = Prisma.UserCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserCreateManyArgs
>;

/**
 * User Create Many response
 */
export type UserCreateManyResponse = Prisma.BatchPayload;

/**
 * User Update Many props
 */
export type UserUpdateManyProps<T extends Prisma.UserUpdateManyArgs = Prisma.UserUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserUpdateManyArgs
>;

/**
 * User Update Many response
 */
export type UserUpdateManyResponse = Prisma.BatchPayload;

/**
 * User Delete Many props
 */
export type UserDeleteManyProps<T extends Prisma.UserDeleteManyArgs = Prisma.UserDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserDeleteManyArgs
>;

/**
 * User Delete Many response
 */
export type UserDeleteManyResponse = Prisma.BatchPayload;

/**
 * User Find First props
 */
export type UserFindFirstProps<T extends Prisma.UserFindFirstArgs = Prisma.UserFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserFindFirstArgs
>;

/**
 * User Find First response
 */
export type UserFindFirstResponse<T extends Prisma.UserFindFirstArgs = Prisma.UserFindFirstArgs> = GetResult<
    Prisma.$UserPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * User Find Unique props
 */
export type UserFindUniqueProps<T extends Prisma.UserFindUniqueArgs = Prisma.UserFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserFindUniqueArgs
>;

/**
 * User Find Unique response
 */
export type UserFindUniqueResponse<T extends Prisma.UserFindUniqueArgs = Prisma.UserFindUniqueArgs> = GetResult<
    Prisma.$UserPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

/**
 * User Find Many props
 */
export type UserFindManyProps<T extends Prisma.UserFindManyArgs = Prisma.UserFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserFindManyArgs
>;

/**
 * User Find Many response
 */
export type UserFindManyResponse<T extends Prisma.UserFindManyArgs = Prisma.UserFindManyArgs> = GetResult<
    Prisma.$UserPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * User Count props
 */
export type UserCountProps<T extends Prisma.UserCountArgs = Prisma.UserCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.UserCountArgs
>;

/**
 * User Count response
 */
export type UserCountResponse<T extends Prisma.UserCountArgs = Prisma.UserCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.UserCountAggregateOutputType>
        : number;
