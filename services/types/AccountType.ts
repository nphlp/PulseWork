import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Account Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$AccountPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Account native fields only
 */
export type AccountModel = Flatten<Payload["scalars"]>;

/**
 * Account relations fields only
 */
export type AccountRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Account native and relations fields
 */
export type AccountComplete = Flatten<AccountModel & AccountRelations>;

/**
 * Account count type
 */
export type AccountCount = number;

// ========== Types ========== //

/**
 * Account Create props
 */
export type AccountCreateProps<T extends Prisma.AccountCreateArgs = Prisma.AccountCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountCreateArgs
>;

/**
 * Account Create response
 */
export type AccountCreateResponse<T extends Prisma.AccountCreateArgs = Prisma.AccountCreateArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Account Upsert props
 */
export type AccountUpsertProps<T extends Prisma.AccountUpsertArgs = Prisma.AccountUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountUpsertArgs
>;

/**
 * Account Upsert response
 */
export type AccountUpsertResponse<T extends Prisma.AccountUpsertArgs = Prisma.AccountUpsertArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Account Update props
 */
export type AccountUpdateProps<T extends Prisma.AccountUpdateArgs = Prisma.AccountUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountUpdateArgs
>;

/**
 * Account Update response
 */
export type AccountUpdateResponse<T extends Prisma.AccountUpdateArgs = Prisma.AccountUpdateArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Account Delete props
 */
export type AccountDeleteProps<T extends Prisma.AccountDeleteArgs = Prisma.AccountDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountDeleteArgs
>;

/**
 * Account Delete response
 */
export type AccountDeleteResponse<T extends Prisma.AccountDeleteArgs = Prisma.AccountDeleteArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Account Create Many props
 */
export type AccountCreateManyProps<T extends Prisma.AccountCreateManyArgs = Prisma.AccountCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.AccountCreateManyArgs>;

/**
 * Account Create Many response
 */
export type AccountCreateManyResponse = Prisma.BatchPayload;

/**
 * Account Update Many props
 */
export type AccountUpdateManyProps<T extends Prisma.AccountUpdateManyArgs = Prisma.AccountUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.AccountUpdateManyArgs>;

/**
 * Account Update Many response
 */
export type AccountUpdateManyResponse = Prisma.BatchPayload;

/**
 * Account Delete Many props
 */
export type AccountDeleteManyProps<T extends Prisma.AccountDeleteManyArgs = Prisma.AccountDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.AccountDeleteManyArgs>;

/**
 * Account Delete Many response
 */
export type AccountDeleteManyResponse = Prisma.BatchPayload;

/**
 * Account Find First props
 */
export type AccountFindFirstProps<T extends Prisma.AccountFindFirstArgs = Prisma.AccountFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.AccountFindFirstArgs>;

/**
 * Account Find First response
 */
export type AccountFindFirstResponse<T extends Prisma.AccountFindFirstArgs = Prisma.AccountFindFirstArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Account Find Unique props
 */
export type AccountFindUniqueProps<T extends Prisma.AccountFindUniqueArgs = Prisma.AccountFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.AccountFindUniqueArgs>;

/**
 * Account Find Unique response
 */
export type AccountFindUniqueResponse<T extends Prisma.AccountFindUniqueArgs = Prisma.AccountFindUniqueArgs> =
    GetResult<Prisma.$AccountPayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * Account Find Many props
 */
export type AccountFindManyProps<T extends Prisma.AccountFindManyArgs = Prisma.AccountFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.AccountFindManyArgs>;

/**
 * Account Find Many response
 */
export type AccountFindManyResponse<T extends Prisma.AccountFindManyArgs = Prisma.AccountFindManyArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Account Count props
 */
export type AccountCountProps<T extends Prisma.AccountCountArgs = Prisma.AccountCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountCountArgs
>;

/**
 * Account Count response
 */
export type AccountCountResponse<T extends Prisma.AccountCountArgs = Prisma.AccountCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.AccountCountAggregateOutputType>
        : number;
