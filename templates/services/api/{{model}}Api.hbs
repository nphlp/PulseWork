import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    {{modelName}}CountCached,
    {{modelName}}FindFirstCached,
    {{modelName}}FindManyCached,
    {{modelName}}FindUniqueCached,
} from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # {{modelName}} Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/\{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type {{modelName}}FindFirstProps<T extends Prisma.{{modelName}}FindFirstArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}FindFirstArgs>;
type {{modelName}}FindFirstResponse<T extends Prisma.{{modelName}}FindFirstArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type {{modelName}}FindUniqueProps<T extends Prisma.{{modelName}}FindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}FindUniqueArgs
>;
type {{modelName}}FindUniqueResponse<T extends Prisma.{{modelName}}FindUniqueArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type {{modelName}}FindManyProps<T extends Prisma.{{modelName}}FindManyArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}FindManyArgs>;
type {{modelName}}FindManyResponse<T extends Prisma.{{modelName}}FindManyArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type {{modelName}}CountProps<T extends Prisma.{{modelName}}CountArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}CountArgs>;
type {{modelName}}CountResponse<T extends Prisma.{{modelName}}CountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.{{modelName}}CountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type {{modelName}}Routes<Input> = {
    "/internal/{{modelNameLower}}/findFirst": <T extends Prisma.{{modelName}}FindFirstArgs>() => {
        params: {{modelName}}FindFirstProps<T>;
        response: {{modelName}}FindFirstResponse<Input extends {{modelName}}FindFirstProps<T> ? Input : never>;
    };
    "/internal/{{modelNameLower}}/findUnique": <T extends Prisma.{{modelName}}FindUniqueArgs>() => {
        params: {{modelName}}FindUniqueProps<T>;
        response: {{modelName}}FindUniqueResponse<Input extends {{modelName}}FindUniqueProps<T> ? Input : never>;
    };
    "/internal/{{modelNameLower}}/findMany": <T extends Prisma.{{modelName}}FindManyArgs>() => {
        params: {{modelName}}FindManyProps<T>;
        response: {{modelName}}FindManyResponse<Input extends {{modelName}}FindManyProps<T> ? Input : never>;
    };
    "/internal/{{modelNameLower}}/count": <T extends Prisma.{{modelName}}CountArgs>() => {
        params: {{modelName}}CountProps<T>;
        response: {{modelName}}CountResponse<Input extends {{modelName}}CountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const {{modelName}}FindFirstApi = async <T extends Prisma.{{modelName}}FindFirstArgs>(
    request: NextRequest,
): RouteResponse<{{modelName}}FindFirstResponse<T>> => {
    try {
        const params: {{modelName}}FindFirstProps<T> = parseAndDecodeParams(request);
        const response: {{modelName}}FindFirstResponse<T> = await {{modelName}}FindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const {{modelName}}FindUniqueApi = async <T extends Prisma.{{modelName}}FindUniqueArgs>(
    request: NextRequest,
): RouteResponse<{{modelName}}FindUniqueResponse<T>> => {
    try {
        const params: {{modelName}}FindUniqueProps<T> = parseAndDecodeParams(request);
        const response: {{modelName}}FindUniqueResponse<T> = await {{modelName}}FindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const {{modelName}}FindManyApi = async <T extends Prisma.{{modelName}}FindManyArgs>(
    request: NextRequest,
): RouteResponse<{{modelName}}FindManyResponse<T>> => {
    try {
        const params: {{modelName}}FindManyProps<T> = parseAndDecodeParams(request);
        const response: {{modelName}}FindManyResponse<T> = await {{modelName}}FindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const {{modelName}}CountApi = async <T extends Prisma.{{modelName}}CountArgs>(
    request: NextRequest,
): RouteResponse<{{modelName}}CountResponse<T>> => {
    try {
        const params: {{modelName}}CountProps<T> = parseAndDecodeParams(request);
        const response: {{modelName}}CountResponse<T> = await {{modelName}}CountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
