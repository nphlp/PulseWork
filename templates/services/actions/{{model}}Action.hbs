"use server";

import {{modelName}}Service from "@class/{{modelName}}Class";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # {{modelName}} Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/\{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type {{modelName}}CreateProps<T extends Prisma.{{modelName}}CreateArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}CreateArgs>;
type {{modelName}}CreateResponse<T extends Prisma.{{modelName}}CreateArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type {{modelName}}UpsertProps<T extends Prisma.{{modelName}}UpsertArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}UpsertArgs>;
type {{modelName}}UpsertResponse<T extends Prisma.{{modelName}}UpsertArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type {{modelName}}UpdateProps<T extends Prisma.{{modelName}}UpdateArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}UpdateArgs>;
type {{modelName}}UpdateResponse<T extends Prisma.{{modelName}}UpdateArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type {{modelName}}DeleteProps<T extends Prisma.{{modelName}}DeleteArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}DeleteArgs>;
type {{modelName}}DeleteResponse<T extends Prisma.{{modelName}}DeleteArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type {{modelName}}CreateManyProps<T extends Prisma.{{modelName}}CreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}CreateManyArgs
>;
type {{modelName}}CreateManyResponse = Prisma.BatchPayload;

// Update Many
type {{modelName}}UpdateManyProps<T extends Prisma.{{modelName}}UpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}UpdateManyArgs
>;
type {{modelName}}UpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type {{modelName}}DeleteManyProps<T extends Prisma.{{modelName}}DeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}DeleteManyArgs
>;
type {{modelName}}DeleteManyResponse = Prisma.BatchPayload;

// Find First
type {{modelName}}FindFirstProps<T extends Prisma.{{modelName}}FindFirstArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}FindFirstArgs>;
type {{modelName}}FindFirstResponse<T extends Prisma.{{modelName}}FindFirstArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type {{modelName}}FindUniqueProps<T extends Prisma.{{modelName}}FindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}FindUniqueArgs
>;
type {{modelName}}FindUniqueResponse<T extends Prisma.{{modelName}}FindUniqueArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type {{modelName}}FindManyProps<T extends Prisma.{{modelName}}FindManyArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}FindManyArgs>;
type {{modelName}}FindManyResponse<T extends Prisma.{{modelName}}FindManyArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type {{modelName}}CountProps<T extends Prisma.{{modelName}}CountArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}CountArgs>;
type {{modelName}}CountResponse<T extends Prisma.{{modelName}}CountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.{{modelName}}CountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## {{modelName}} Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}CreateAction = async <T extends Prisma.{{modelName}}CreateArgs>(
    props: {{modelName}}CreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}CreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}CreateAction", "{{modelName}}", "create");
    return await {{modelName}}Service.create(props);
};

/**
 * ## {{modelName}} Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}UpsertAction = async <T extends Prisma.{{modelName}}UpsertArgs>(
    props: {{modelName}}UpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}UpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}UpsertAction", "{{modelName}}", "upsert");
    return await {{modelName}}Service.upsert(props);
};

/**
 * ## {{modelName}} Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}UpdateAction = async <T extends Prisma.{{modelName}}UpdateArgs>(
    props: {{modelName}}UpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}UpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}UpdateAction", "{{modelName}}", "update");
    return await {{modelName}}Service.update(props);
};

/**
 * ## {{modelName}} Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}DeleteAction = async <T extends Prisma.{{modelName}}DeleteArgs>(
    props: {{modelName}}DeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}DeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}DeleteAction", "{{modelName}}", "delete");
    return await {{modelName}}Service.delete(props);
};

/**
 * ## {{modelName}} Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}CreateManyAction = async <T extends Prisma.{{modelName}}CreateManyArgs>(
    props: {{modelName}}CreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}CreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}CreateManyAction", "{{modelName}}", "createMany");
    return await {{modelName}}Service.createMany(props);
};

/**
 * ## {{modelName}} Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}UpdateManyAction = async <T extends Prisma.{{modelName}}UpdateManyArgs>(
    props: {{modelName}}UpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}UpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}UpdateManyAction", "{{modelName}}", "updateMany");
    return await {{modelName}}Service.updateMany(props);
};

/**
 * ## {{modelName}} Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}DeleteManyAction = async <T extends Prisma.{{modelName}}DeleteManyArgs>(
    props: {{modelName}}DeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}DeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}DeleteManyAction", "{{modelName}}", "deleteMany");
    return await {{modelName}}Service.deleteMany(props);
};

/**
 * ## {{modelName}} Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const {{modelName}}FindFirstAction = async <T extends Prisma.{{modelName}}FindFirstArgs>(
    props: {{modelName}}FindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}FindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}FindFirstAction", "{{modelName}}", "findFirst");
    return await {{modelName}}Service.findFirst(props);
};

/**
 * ## {{modelName}} Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const {{modelName}}FindUniqueAction = async <T extends Prisma.{{modelName}}FindUniqueArgs>(
    props: {{modelName}}FindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}FindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}FindUniqueAction", "{{modelName}}", "findUnique");
    return await {{modelName}}Service.findUnique(props);
};

/**
 * ## {{modelName}} Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const {{modelName}}FindManyAction = async <T extends Prisma.{{modelName}}FindManyArgs>(
    props: {{modelName}}FindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}FindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}FindManyAction", "{{modelName}}", "findMany");
    return await {{modelName}}Service.findMany(props);
};

/**
 * ## {{modelName}} Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const {{modelName}}CountAction = async <T extends Prisma.{{modelName}}CountArgs>(
    props: {{modelName}}CountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<{{modelName}}CountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "{{modelName}}CountAction", "{{modelName}}", "count");
    return await {{modelName}}Service.count(props);
};
