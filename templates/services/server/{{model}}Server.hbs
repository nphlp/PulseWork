import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    {{modelName}}CountCached,
    {{modelName}}FindFirstCached,
    {{modelName}}FindManyCached,
    {{modelName}}FindUniqueCached,
} from "@services/cached";

/**
 * # {{modelName}} Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/\{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type {{modelName}}FindFirstProps<T extends Prisma.{{modelName}}FindFirstArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}FindFirstArgs>;
type {{modelName}}FindFirstResponse<T extends Prisma.{{modelName}}FindFirstArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type {{modelName}}FindUniqueProps<T extends Prisma.{{modelName}}FindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}FindUniqueArgs
>;
type {{modelName}}FindUniqueResponse<T extends Prisma.{{modelName}}FindUniqueArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type {{modelName}}FindManyProps<T extends Prisma.{{modelName}}FindManyArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}FindManyArgs>;
type {{modelName}}FindManyResponse<T extends Prisma.{{modelName}}FindManyArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type {{modelName}}CountProps<T extends Prisma.{{modelName}}CountArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}CountArgs>;
type {{modelName}}CountResponse<T extends Prisma.{{modelName}}CountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.{{modelName}}CountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## {{modelName}} Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}FindFirstServer = async <T extends Prisma.{{modelName}}FindFirstArgs>(
    params: {{modelName}}FindFirstProps<T>,
): Promise<{{modelName}}FindFirstResponse<T>> => {
    return await {{modelName}}FindFirstCached(params);
};

/**
 * ## {{modelName}} Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}FindUniqueServer = async <T extends Prisma.{{modelName}}FindUniqueArgs>(
    params: {{modelName}}FindUniqueProps<T>,
): Promise<{{modelName}}FindUniqueResponse<T>> => {
    return await {{modelName}}FindUniqueCached(params);
};

/**
 * ## {{modelName}} Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}FindManyServer = async <T extends Prisma.{{modelName}}FindManyArgs>(
    params: {{modelName}}FindManyProps<T>,
): Promise<{{modelName}}FindManyResponse<T>> => {
    return await {{modelName}}FindManyCached(params);
};

/**
 * ## {{modelName}} Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const {{modelName}}CountServer = async <T extends Prisma.{{modelName}}CountArgs>(
    params: {{modelName}}CountProps<T>,
): Promise<{{modelName}}CountResponse<T>> => {
    return await {{modelName}}CountCached(params);
};
