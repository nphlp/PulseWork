import {{modelName}}Service from "@class/{{modelName}}Class";
import { Prisma } from "@prisma/client";
import {
    {{modelName}}CountProps,
    {{modelName}}CountResponse,
    {{modelName}}FindFirstProps,
    {{modelName}}FindFirstResponse,
    {{modelName}}FindManyProps,
    {{modelName}}FindManyResponse,
    {{modelName}}FindUniqueProps,
    {{modelName}}FindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # {{modelName}} Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/\{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const {{modelName}}FindFirstCached = async <T extends Prisma.{{modelName}}FindFirstArgs>(
    params: {{modelName}}FindFirstProps<T>,
): Promise<{{modelName}}FindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All {{modelNameLower}} services
        "{{modelNameLower}}",
        // All findFirst services
        "findFirst",
        // All {{modelNameLower}} findFirst services
        "{{modelNameLower}}-findFirst",
        // This specific services
        hashParamsForCacheKey("{{modelNameLower}}-findFirst", params),
    );

    return await {{modelName}}Service.findFirst(params);
};

export const {{modelName}}FindUniqueCached = async <T extends Prisma.{{modelName}}FindUniqueArgs>(
    params: {{modelName}}FindUniqueProps<T>,
): Promise<{{modelName}}FindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All {{modelNameLower}} services
        "{{modelNameLower}}",
        // All findUnique services
        "findUnique",
        // All {{modelNameLower}} findUnique services
        "{{modelNameLower}}-findUnique",
        // This specific services
        hashParamsForCacheKey("{{modelNameLower}}-findUnique", params),
    );

    return await {{modelName}}Service.findUnique(params);
};

export const {{modelName}}FindManyCached = async <T extends Prisma.{{modelName}}FindManyArgs>(
    params: {{modelName}}FindManyProps<T>,
): Promise<{{modelName}}FindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All {{modelNameLower}} services
        "{{modelNameLower}}",
        // All findMany services
        "findMany",
        // All {{modelNameLower}} findMany services
        "{{modelNameLower}}-findMany",
        // This specific services
        hashParamsForCacheKey("{{modelNameLower}}-findMany", params),
    );

    return await {{modelName}}Service.findMany(params);
};

export const {{modelName}}CountCached = async <T extends Prisma.{{modelName}}CountArgs>(
    params: {{modelName}}CountProps<T>,
): Promise<{{modelName}}CountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All {{modelNameLower}} services
        "{{modelNameLower}}",
        // All count services
        "count",
        // All {{modelNameLower}} count services
        "{{modelNameLower}}-count",
        // This specific services
        hashParamsForCacheKey("{{modelNameLower}}-count", params),
    );

    return await {{modelName}}Service.count(params);
};
