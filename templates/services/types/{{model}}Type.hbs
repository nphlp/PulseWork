import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # {{modelName}} Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/\{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.${{modelName}}Payload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * {{modelName}} native fields only
 */
export type {{modelName}}Model = Flatten<Payload["scalars"]>;

/**
 * {{modelName}} relations fields only
 */
export type {{modelName}}Relations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * {{modelName}} native and relations fields
 */
export type {{modelName}}Complete = Flatten<{{modelName}}Model & {{modelName}}Relations>;

/**
 * {{modelName}} count type
 */
export type {{modelName}}Count = number;

// ========== Types ========== //

/**
 * {{modelName}} Create props
 */
export type {{modelName}}CreateProps<T extends Prisma.{{modelName}}CreateArgs = Prisma.{{modelName}}CreateArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}CreateArgs>;

/**
 * {{modelName}} Create response
 */
export type {{modelName}}CreateResponse<T extends Prisma.{{modelName}}CreateArgs = Prisma.{{modelName}}CreateArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * {{modelName}} Upsert props
 */
export type {{modelName}}UpsertProps<T extends Prisma.{{modelName}}UpsertArgs = Prisma.{{modelName}}UpsertArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}UpsertArgs>;

/**
 * {{modelName}} Upsert response
 */
export type {{modelName}}UpsertResponse<T extends Prisma.{{modelName}}UpsertArgs = Prisma.{{modelName}}UpsertArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * {{modelName}} Update props
 */
export type {{modelName}}UpdateProps<T extends Prisma.{{modelName}}UpdateArgs = Prisma.{{modelName}}UpdateArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}UpdateArgs>;

/**
 * {{modelName}} Update response
 */
export type {{modelName}}UpdateResponse<T extends Prisma.{{modelName}}UpdateArgs = Prisma.{{modelName}}UpdateArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * {{modelName}} Delete props
 */
export type {{modelName}}DeleteProps<T extends Prisma.{{modelName}}DeleteArgs = Prisma.{{modelName}}DeleteArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}DeleteArgs>;

/**
 * {{modelName}} Delete response
 */
export type {{modelName}}DeleteResponse<T extends Prisma.{{modelName}}DeleteArgs = Prisma.{{modelName}}DeleteArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * {{modelName}} Create Many props
 */
export type {{modelName}}CreateManyProps<T extends Prisma.{{modelName}}CreateManyArgs = Prisma.{{modelName}}CreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.{{modelName}}CreateManyArgs>;

/**
 * {{modelName}} Create Many response
 */
export type {{modelName}}CreateManyResponse = Prisma.BatchPayload;

/**
 * {{modelName}} Update Many props
 */
export type {{modelName}}UpdateManyProps<T extends Prisma.{{modelName}}UpdateManyArgs = Prisma.{{modelName}}UpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.{{modelName}}UpdateManyArgs>;

/**
 * {{modelName}} Update Many response
 */
export type {{modelName}}UpdateManyResponse = Prisma.BatchPayload;

/**
 * {{modelName}} Delete Many props
 */
export type {{modelName}}DeleteManyProps<T extends Prisma.{{modelName}}DeleteManyArgs = Prisma.{{modelName}}DeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.{{modelName}}DeleteManyArgs>;

/**
 * {{modelName}} Delete Many response
 */
export type {{modelName}}DeleteManyResponse = Prisma.BatchPayload;

/**
 * {{modelName}} Find First props
 */
export type {{modelName}}FindFirstProps<T extends Prisma.{{modelName}}FindFirstArgs = Prisma.{{modelName}}FindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.{{modelName}}FindFirstArgs>;

/**
 * {{modelName}} Find First response
 */
export type {{modelName}}FindFirstResponse<T extends Prisma.{{modelName}}FindFirstArgs = Prisma.{{modelName}}FindFirstArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * {{modelName}} Find Unique props
 */
export type {{modelName}}FindUniqueProps<T extends Prisma.{{modelName}}FindUniqueArgs = Prisma.{{modelName}}FindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.{{modelName}}FindUniqueArgs>;

/**
 * {{modelName}} Find Unique response
 */
export type {{modelName}}FindUniqueResponse<T extends Prisma.{{modelName}}FindUniqueArgs = Prisma.{{modelName}}FindUniqueArgs> =
    GetResult<Prisma.${{modelName}}Payload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * {{modelName}} Find Many props
 */
export type {{modelName}}FindManyProps<T extends Prisma.{{modelName}}FindManyArgs = Prisma.{{modelName}}FindManyArgs> =
    Prisma.SelectSubset<T, Prisma.{{modelName}}FindManyArgs>;

/**
 * {{modelName}} Find Many response
 */
export type {{modelName}}FindManyResponse<T extends Prisma.{{modelName}}FindManyArgs = Prisma.{{modelName}}FindManyArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * {{modelName}} Count props
 */
export type {{modelName}}CountProps<T extends Prisma.{{modelName}}CountArgs = Prisma.{{modelName}}CountArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}CountArgs
>;

/**
 * {{modelName}} Count response
 */
export type {{modelName}}CountResponse<T extends Prisma.{{modelName}}CountArgs = Prisma.{{modelName}}CountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.{{modelName}}CountAggregateOutputType>
        : number;
