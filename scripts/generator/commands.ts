import path from "path";
import { generateIndexFiles, generateModelFiles } from "./fileGenerator";
import { removePath } from "./fileUtils";
import { pathsToRemove } from "./mapping";
import { getModelsInfo } from "./modelExtractor";

/**
 * Impl√©mentation des commandes disponibles via l'interface CLI
 *
 * Ce module expose les commandes principales du g√©n√©rateur:
 * - list: affiche les mod√®les disponibles
 * - clear: supprime les fichiers g√©n√©r√©s
 * - generate: g√©n√®re les fichiers pour tous les mod√®les
 */

/**
 * Affiche la liste des mod√®les d√©tect√©s dans le sch√©ma Prisma
 *
 * Extrait et affiche tous les mod√®les disponibles pour
 * la g√©n√©ration, avec un formatage console lisible.
 */
export const listModels = (): void => {
    const { models } = getModelsInfo();

    console.log(`üìã ${models.length} mod√®les disponibles dans le Prisma Client:\n  - ${models.join("\n  - ")}`);
    console.log("\n‚úÖ Listage termin√© avec succ√®s!");
};

/**
 * Supprime tous les fichiers g√©n√©r√©s pr√©c√©demment
 *
 * Nettoie l'environnement en supprimant tous les r√©pertoires et fichiers
 * qui ont √©t√© cr√©√©s par le g√©n√©rateur.
 */
export const clearModels = (): void => {
    console.log("üöÄ Nettoyage des fichiers g√©n√©r√©s...");

    // Supprimer tous les chemins g√©n√©r√©s
    for (const pathToRemove of pathsToRemove) {
        removePath(path.join(process.cwd(), pathToRemove));
    }

    console.log("‚úÖ Suppression des fichiers g√©n√©r√©s termin√©e avec succ√®s!");
};

/**
 * G√©n√®re tous les fichiers pour tous les mod√®les
 *
 * Processus principal de g√©n√©ration qui:
 * 1. Extrait les mod√®les du sch√©ma Prisma
 * 2. Nettoie les fichiers existants
 * 3. G√©n√®re les fichiers sp√©cifiques √† chaque mod√®le
 * 4. G√©n√®re les fichiers d'index et de configuration
 */
export const generateModels = (): void => {
    console.log("üöÄ D√©marrage de la g√©n√©ration des fichiers...");

    // Extraire les noms des mod√®les du sch√©ma Prisma
    const { models } = getModelsInfo();

    // V√©rifier si des mod√®les ont √©t√© trouv√©s
    if (models.length === 0) {
        console.error("‚ùå Aucun mod√®le trouv√© dans le sch√©ma Prisma");
        return;
    }

    // Nettoyer l'environnement avant la g√©n√©ration
    for (const pathToRemove of pathsToRemove) {
        removePath(path.join(process.cwd(), pathToRemove));
    }

    // G√©n√©rer les fichiers pour chaque mod√®le individuellement
    for (const namme of models) {
        generateModelFiles(namme);
    }

    // G√©n√©rer les fichiers globaux (index, routes)
    generateIndexFiles(models);

    console.log("‚úÖ G√©n√©ration termin√©e avec succ√®s!");
};
