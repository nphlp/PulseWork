services:
    postgres:
        image: postgres:16-alpine
        container_name: postgres
        restart: unless-stopped
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        volumes:
            - postgres-volume:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
            interval: 2s
            timeout: 1s
            retries: 30
            start_period: 10s
        networks:
            - app-network

    nextjs:
        container_name: nextjs
        env_file:
            - ../.env.basic
        build:
            context: ../
            args:
                - NODE_ENV=${NODE_ENV}
                - NEXTJS_STANDALONE=${NEXTJS_STANDALONE}
                - DATABASE_URL=${DATABASE_URL}
                - POSTGRES_HOST=${POSTGRES_HOST}
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
                - POSTGRES_DB=${POSTGRES_DB}
                - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
            dockerfile: docker/Dockerfile
            target: runner
        ports:
            - "3000:3000"
        restart: unless-stopped
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - app-network

volumes:
    postgres-volume:
        name: postgres-volume
        driver: local

networks:
    app-network:
        name: app-network
        driver: bridge
